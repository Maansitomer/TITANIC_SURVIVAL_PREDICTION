{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":2965537,"sourceType":"datasetVersion","datasetId":1818188}],"dockerImageVersionId":30761,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score, classification_report\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nimport xgboost as xgb\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-09-09T17:13:13.152648Z","iopub.execute_input":"2024-09-09T17:13:13.153084Z","iopub.status.idle":"2024-09-09T17:13:13.171147Z","shell.execute_reply.started":"2024-09-09T17:13:13.153044Z","shell.execute_reply":"2024-09-09T17:13:13.169925Z"},"trusted":true},"execution_count":43,"outputs":[{"name":"stdout","text":"/kaggle/input/titanic-dataset/Titanic-Dataset.csv\n","output_type":"stream"}]},{"cell_type":"code","source":"data = pd.read_csv('/kaggle/input/titanic-dataset/Titanic-Dataset.csv')\ndata","metadata":{"execution":{"iopub.status.busy":"2024-09-09T18:01:41.813606Z","iopub.execute_input":"2024-09-09T18:01:41.813999Z","iopub.status.idle":"2024-09-09T18:01:41.864317Z","shell.execute_reply.started":"2024-09-09T18:01:41.813964Z","shell.execute_reply":"2024-09-09T18:01:41.863098Z"},"trusted":true},"execution_count":94,"outputs":[{"execution_count":94,"output_type":"execute_result","data":{"text/plain":"     PassengerId  Survived  Pclass  \\\n0              1         0       3   \n1              2         1       1   \n2              3         1       3   \n3              4         1       1   \n4              5         0       3   \n..           ...       ...     ...   \n886          887         0       2   \n887          888         1       1   \n888          889         0       3   \n889          890         1       1   \n890          891         0       3   \n\n                                                  Name     Sex   Age  SibSp  \\\n0                              Braund, Mr. Owen Harris    male  22.0      1   \n1    Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n2                               Heikkinen, Miss. Laina  female  26.0      0   \n3         Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n4                             Allen, Mr. William Henry    male  35.0      0   \n..                                                 ...     ...   ...    ...   \n886                              Montvila, Rev. Juozas    male  27.0      0   \n887                       Graham, Miss. Margaret Edith  female  19.0      0   \n888           Johnston, Miss. Catherine Helen \"Carrie\"  female   NaN      1   \n889                              Behr, Mr. Karl Howell    male  26.0      0   \n890                                Dooley, Mr. Patrick    male  32.0      0   \n\n     Parch            Ticket     Fare Cabin Embarked  \n0        0         A/5 21171   7.2500   NaN        S  \n1        0          PC 17599  71.2833   C85        C  \n2        0  STON/O2. 3101282   7.9250   NaN        S  \n3        0            113803  53.1000  C123        S  \n4        0            373450   8.0500   NaN        S  \n..     ...               ...      ...   ...      ...  \n886      0            211536  13.0000   NaN        S  \n887      0            112053  30.0000   B42        S  \n888      2        W./C. 6607  23.4500   NaN        S  \n889      0            111369  30.0000  C148        C  \n890      0            370376   7.7500   NaN        Q  \n\n[891 rows x 12 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Braund, Mr. Owen Harris</td>\n      <td>male</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>A/5 21171</td>\n      <td>7.2500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n      <td>female</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>PC 17599</td>\n      <td>71.2833</td>\n      <td>C85</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n      <td>Heikkinen, Miss. Laina</td>\n      <td>female</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>STON/O2. 3101282</td>\n      <td>7.9250</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n      <td>female</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>113803</td>\n      <td>53.1000</td>\n      <td>C123</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Allen, Mr. William Henry</td>\n      <td>male</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>373450</td>\n      <td>8.0500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>886</th>\n      <td>887</td>\n      <td>0</td>\n      <td>2</td>\n      <td>Montvila, Rev. Juozas</td>\n      <td>male</td>\n      <td>27.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>211536</td>\n      <td>13.0000</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>887</th>\n      <td>888</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Graham, Miss. Margaret Edith</td>\n      <td>female</td>\n      <td>19.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>112053</td>\n      <td>30.0000</td>\n      <td>B42</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>888</th>\n      <td>889</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Johnston, Miss. Catherine Helen \"Carrie\"</td>\n      <td>female</td>\n      <td>NaN</td>\n      <td>1</td>\n      <td>2</td>\n      <td>W./C. 6607</td>\n      <td>23.4500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>889</th>\n      <td>890</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Behr, Mr. Karl Howell</td>\n      <td>male</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>111369</td>\n      <td>30.0000</td>\n      <td>C148</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>890</th>\n      <td>891</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Dooley, Mr. Patrick</td>\n      <td>male</td>\n      <td>32.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>370376</td>\n      <td>7.7500</td>\n      <td>NaN</td>\n      <td>Q</td>\n    </tr>\n  </tbody>\n</table>\n<p>891 rows Ã— 12 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"survived_counts = data['Survived'].value_counts()\nsurvived_counts","metadata":{"execution":{"iopub.status.busy":"2024-09-09T17:49:29.212791Z","iopub.execute_input":"2024-09-09T17:49:29.213169Z","iopub.status.idle":"2024-09-09T17:49:29.223493Z","shell.execute_reply.started":"2024-09-09T17:49:29.213134Z","shell.execute_reply":"2024-09-09T17:49:29.222502Z"},"trusted":true},"execution_count":68,"outputs":[{"execution_count":68,"output_type":"execute_result","data":{"text/plain":"Survived\n0    549\n1    342\nName: count, dtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"plt.figure(figsize=(8, 6))\nplt.pie(survived_counts, labels=['No', 'Yes'], startangle=90)\nplt.title('Survival Proportion')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-09-09T17:49:49.381114Z","iopub.execute_input":"2024-09-09T17:49:49.381534Z","iopub.status.idle":"2024-09-09T17:49:49.517478Z","shell.execute_reply.started":"2024-09-09T17:49:49.381496Z","shell.execute_reply":"2024-09-09T17:49:49.515759Z"},"trusted":true},"execution_count":70,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 800x600 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"plt.figure(figsize=(12, 10))\n\n\nplt.subplot(2, 2, 1)\nsns.countplot(data=data, x='Survived', hue='Sex')\nplt.title('Survival Count by Gender')\n\nplt.tight_layout()\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-09-09T17:28:01.506322Z","iopub.execute_input":"2024-09-09T17:28:01.507552Z","iopub.status.idle":"2024-09-09T17:28:01.820176Z","shell.execute_reply.started":"2024-09-09T17:28:01.507502Z","shell.execute_reply":"2024-09-09T17:28:01.818914Z"},"trusted":true},"execution_count":53,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x1000 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"\nplt.figure(figsize=(12, 10))\n\nplt.subplot(2, 2, 4)\nsns.countplot(data=data, x='Pclass', hue='Survived')\nplt.title('Survival Count by Pclass')\n\nplt.tight_layout()\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-09-09T17:28:27.825362Z","iopub.execute_input":"2024-09-09T17:28:27.826287Z","iopub.status.idle":"2024-09-09T17:28:28.190971Z","shell.execute_reply.started":"2024-09-09T17:28:27.826210Z","shell.execute_reply":"2024-09-09T17:28:28.189803Z"},"trusted":true},"execution_count":54,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x1000 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"plt.figure(figsize=(12, 10))\n\nplt.subplot(2, 2, 3)\nsns.histplot(data['Fare'], kde=True, bins=20)\nplt.title('Fare Distribution')","metadata":{"execution":{"iopub.status.busy":"2024-09-09T17:33:04.905181Z","iopub.execute_input":"2024-09-09T17:33:04.905646Z","iopub.status.idle":"2024-09-09T17:33:05.373922Z","shell.execute_reply.started":"2024-09-09T17:33:04.905607Z","shell.execute_reply":"2024-09-09T17:33:05.372499Z"},"trusted":true},"execution_count":57,"outputs":[{"execution_count":57,"output_type":"execute_result","data":{"text/plain":"Text(0.5, 1.0, 'Fare Distribution')"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x1000 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"plt.figure(figsize=(12, 10))\n\nplt.subplot(2, 2, 2)\nsns.histplot(data['Age'].dropna(), kde=True, bins=20)\nplt.title('Age Distribution')\n","metadata":{"execution":{"iopub.status.busy":"2024-09-09T17:54:41.102852Z","iopub.execute_input":"2024-09-09T17:54:41.103713Z","iopub.status.idle":"2024-09-09T17:54:41.572285Z","shell.execute_reply.started":"2024-09-09T17:54:41.103668Z","shell.execute_reply":"2024-09-09T17:54:41.570161Z"},"trusted":true},"execution_count":79,"outputs":[{"execution_count":79,"output_type":"execute_result","data":{"text/plain":"Text(0.5, 1.0, 'Age Distribution')"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x1000 with 1 Axes>","image/png":"iVBORw0KGgoAAAANSUhEUgAAAfIAAAGzCAYAAADUlZUZAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuNSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/xnp5ZAAAACXBIWXMAAA9hAAAPYQGoP6dpAABeHklEQVR4nO3dd3gU1f4G8Hd72qZtekJLIAlpEHoJHakWEC6KoqD8VLxYropXRUVBFLsiehHrRUSQC7YIKKCCiqEaIAECgRQI6Zu+KZvszu+PkJUYSsoms7N5P8/DA5mdPfvOks03Z+bMOTJBEAQQERGRJMnFDkBEREStx0JOREQkYSzkREREEsZCTkREJGEs5ERERBLGQk5ERCRhLOREREQSxkJOREQkYSzkREREEsZCTkSNZGVlISwsDF999VW7v9ZXX32FsLAwZGVlWbaNHTsW9913X7u/NgDs378fYWFh2L9/f4e8HlF7UIodgMgerV+/HsuWLUNMTAz+97//iZolLCzM8m+FQgEXFxcEBQWhX79+uPXWW9GzZ0+rvM769evh6OiIm2++2SrtWZMtZyNqKxnnWieyvltvvRX5+fm4cOECduzYgW7duomWJSwsDMOHD8dNN90EQRBQUVGBlJQU/PDDD6iqqsKiRYtw1113WfYXBAFGoxFKpRIKhaLZr3P99dfDw8MD69ata/ZzTCYT6urqoFarIZPJANT3yHv16oU1a9Y0/yBbmc1sNqO2thYqlQpyOU9QkjTxO5fIys6fP4/ExEQ89dRT8PT0RHx8vNiR0L17d9x0002YNm0a5syZg+XLl2Pnzp2Ijo7Gyy+/jD179lj2lclk0Gg0LSriLVVZWQmg/gyBRqOxFPGOJpfLodFoWMRJ0vjdS2Rl8fHxcHNzw6hRozBx4sQrFvLi4mI8/vjj6NevHwYMGIAnnngCKSkpl70+ffbsWTz00EMYNGgQoqOjcfPNN+Onn35qU04PDw+8+eabUCqVWL16tWX75a6RFxQU4KmnnsLIkSMRFRWFuLg43H///ZZr22PHjkVqaioOHDiAsLAwhIWF4Y477gDw13XwAwcO4Pnnn8fQoUMxatSoRo9deo28we+//46bbroJ0dHRmDJlCnbs2NHo8VWrVjW6bNDg721eLduVrpFv374dN998M2JiYjB48GAsWrQIeXl5jfZ58sknERsbi7y8PPzzn/9EbGwshgwZgldeeQUmk6l5/wlEVsBr5ERWFh8fj+uuuw5qtRrXX389NmzYgGPHjiEmJsayj9lsxv33349jx45h9uzZCA4Oxk8//YQnnniiSXupqamYPXs2fH19cc8998DJyQnbt2/HwoULsWrVKlx33XWtzhoQEICBAwdi//79qKiogIuLy2X3e/DBB3HmzBnMmTMHgYGBKCoqwt69e5GTk4OgoCAsXrwYL7zwApycnLBgwQIAgJeXV6M2li5dCk9PTyxcuNDSI7+SjIwMPPLII7j11lsxffp0bNmyBQ8//DA++ugjDB8+vEXH2Jxsl/rqq6/w1FNPITo6Go8++ij0ej0+++wz/Pnnn/jmm2/g6upq2ddkMmH+/PmIiYnBv//9byQkJOCTTz5Bly5dcNttt7UoJ1FrsZATWVFycjLS0tLw7LPPAgD69+8PPz8/xMfHNyrku3btQmJiIhYvXoy5c+cCAGbPnt3oWnWDF198Ef7+/tiyZQvUajUA4LbbbsPs2bPx+uuvt6mQA0CvXr2QkJCArKwshIeHN3m8rKwMiYmJ+Pe//4358+dbtl86snz8+PF4++234eHhgZtuuumyr+Pm5ob//ve/zTpln5GRgVWrVmHChAkAgJkzZ2LSpEl4/fXXW1zIm5OtQW1tLV5//XWEhoZi/fr10Gg0AOr/H++77z7897//xUMPPWTZv6amBpMnT8bChQsB1P8fTp8+HZs3b2Yhpw7DU+tEVhQfHw8vLy8MHjwYQP315ilTpmDbtm2NTrf+9ttvUKlUmDVrlmWbXC7H7bff3qi9kpIS7Nu3D5MnT0ZFRQWKiopQVFSE4uJixMXFISMjo8kp35ZycnICABgMhss+7uDgAJVKhQMHDqC0tLTVrzNr1qxmX3f38fFp9AuKi4sLpk2bhhMnTqCgoKDVGa4lOTkZer0es2fPthRxABg9ejSCg4Oxe/fuJs+ZPXt2o6/79+9/2UsFRO2FPXIiKzGZTNi6dSsGDx7c6Ad5TEwMPvnkEyQkJCAuLg4AkJ2dDW9vbzg6OjZqo2vXro2+PnfuHARBwMqVK7Fy5crLvq5er4evr2+rczec5nZ2dr7s42q1GosWLcIrr7yC4cOHo0+fPhg9ejSmTZsGb2/vZr9OUFBQs/ft1q1bkwFw3bt3BwBcuHChRa/bEtnZ2QCAHj16NHksODgYhw8fbrRNo9HA09Oz0TY3N7c2/cJD1FIs5ERWsm/fPhQUFGDr1q3YunVrk8fj4+Mthby5zGYzAODuu+/GiBEjLrvP34t/S6WmpkKhUFy10M6bNw9jx47Frl278Pvvv2PlypX44IMPsHbtWkRERDTrdS7t4VrDlUa6d+RAs/Yc2U/UXCzkRFYSHx8PnU6HJUuWNHls586d2LlzJ5YuXQoHBwcEBARg//79qKqqatQrP3fuXKPndenSBQCgUqkwbNgwq2fOzs7GwYMH0bdv3ysOdGvQtWtX3H333bj77ruRkZGBadOm4ZNPPsHrr78O4MqFtTUyMzMhCEKjNjMyMgAAgYGBAGAZdFZWVtZoAFpDr/pSzc0WEBAAAEhPT8fQoUMbPZaenm55nMiW8Bo5kRVUV1djx44dGD16NCZNmtTkz+233w6DwYCff/4ZABAXF4fa2lps2rTJ0obZbMb69esbtavT6TBo0CB8+eWXyM/Pb/K6RUVFrc5cUlKCRx99FCaTyTKa+3KqqqpQU1PTaFvXrl3h7OwMo9Fo2ebo6IiysrJW57lUfn4+du7cafm6oqIC33zzDXr37m05rd5wJuLgwYOW/SorK/HNN980aa+52aKioqDT6bBx48ZGx7Znzx6cPXsWo0ePbuUREbUf9siJrODnn3+GwWDA2LFjL/t437594enpie+++w5TpkzB+PHjERMTg1deeQXnzp1DcHAwfv75Z8u11Ut7kM899xxuu+023HDDDZg1axa6dOmCwsJCHDlyBLm5ufjuu++umS8jIwPffvstBEGAwWCwzOxWWVmJJ598EiNHjrzqc+fNm4dJkyahZ8+eUCgU2LVrFwoLCzF16lTLfpGRkdiwYQP+85//oFu3bvD09GzSq22u7t274+mnn0ZSUhJ0Oh22bNkCvV6PFStWWPYZPnw4AgIC8PTTTyMtLQ0KhQJbtmyBh4dHk155c7OpVCosWrQITz31FObMmYOpU6dabj8LDAzEvHnzWnU8RO2JhZzICr777jtoNJor3holl8sxevRoxMfHo7i4GB4eHlizZg1efPFFfP3115DL5bjuuuuwcOHCJiOme/bsiS1btuDdd9/F119/jZKSEnh6eiIiIsJy29O17N27F3v37oVcLrfMtT5t2jTccsst15xr3c/PD1OnTkVCQgK+++47KBQKBAcH4+2338bEiRMt+y1cuBDZ2dn46KOPYDAYMGjQoDYV8meffRavvvoq0tPTERQUhLfeeqvROAGVSoV3330XS5cuxcqVK+Ht7Y25c+fC1dUVTz31VKP2WpLt5ptvhoODAz788EO8/vrrcHJywvjx4/H44483OoVPZCs41zqRDdm1axcWLlyIL774Av379xc7DhFJAK+RE4mkurq60dcmkwnr1q2Di4sLIiMjRUpFRFLDU+tEInnhhRdQXV2N2NhYGI1G7NixA4mJiXj00Ufh4OAgdjwikgieWicSSXx8PD799FNkZmaipqYG3bp1w+zZszFnzhyxoxGRhLCQExERSRivkRMREUkYCzkREZGEcbAb6mfUqqurg1wut+o0k0RERK0hCALMZjOUSiXk8qv3uVnIAdTV1SEpKUnsGERERI1ER0dDrVZfdR8WcsDy2050dHSrVzMymUxISkpqUxtiYn7xSf0YmF98Uj8G5m/a1rV64wALOYC/5rVWKBRtfvOt0YaYmF98Uj8G5hef1I+B+f/SnMu9HOxGREQkYSzkREREEsZCTkREJGGiFvKDBw9iwYIFiIuLQ1hYGHbt2tXocUEQsHLlSsTFxSEmJgbz5s1DRkZGo31KSkrw2GOPoV+/fhgwYAAWL14Mg8HQgUdBREQkHlELeWVlJcLCwvDcc89d9vEPP/wQ69atw/PPP49NmzbB0dER8+fPR01NjWWfRYsW4cyZM/j000/x/vvv49ChQ1iyZElHHQIREZGoRC3ko0aNwiOPPILrrruuyWOCIOCzzz7D/fffj/HjxyM8PByvvvoq8vPzLT33s2fP4rfffsPy5cvRp08fDBgwAM888wy2bt2KvLy8jj4cIiKiDmezt59lZWWhoKAAw4YNs2zTarXo06cPEhMTMXXqVCQmJsLV1RXR0dGWfYYNGwa5XI5jx45d9heEqzGZTK3O2/DctrQhJuYXn9SPgfnFJ/VjYP6mbTWHzRbygoICAIBOp2u0XafTobCwEABQWFgIT0/PRo8rlUq4ublZnt8S1pjdTeozxDG/+KR+DMwvPqkfA/O3jM0WcjFwZjfmF5PUj4H5xSf1Y2D+pm01h80Wcm9vbwCAXq+Hj4+PZbter0d4eDgAwMvLC0VFRY2eV1dXh9LSUsvzW4IzuzG/LZD6MTC/+KR+DMzfMjZ7H3lQUBC8vb2RkJBg2VZRUYGjR48iNjYWABAbG4uysjIkJydb9tm3bx/MZjNiYmI6PDMREVFHE7VHbjAYcO7cOcvXWVlZOHnyJNzc3BAQEIA777wTq1evRrdu3RAUFISVK1fCx8cH48ePBwCEhIRgxIgRePbZZ7F06VLU1tbihRdewNSpU+Hr6yvWYREREXUYUQt5cnIy7rzzTsvXK1asAABMnz4dL7/8Mu655x5UVVVhyZIlKCsrQ//+/fHRRx9Bo9FYnvP666/jhRdewNy5cyGXyzFhwgQ888wzHX4sREREYhC1kA8ePBinTp264uMymQwPP/wwHn744Svu4+7ujjfeeKM94pFEmQUB8masGNTRbRERtQebHexG1FpymQzbk3JQZDC2qR1PZzUmR/tbKRURUftgISe7VGQwIr+85to7EhFJnM2OWiciIqJrYyEnIiKSMBZyIiIiCWMhJyIikjAWciIiIgljISciIpIwFnIiIiIJYyEnIiKSMBZyIiIiCWMhJyIikjAWciIiIgljISciIpIwFnIiIiIJYyEnIiKSMBZyIiIiCWMhJyIikjAWciIiIgljISciIpIwFnIiIiIJYyEnIiKSMBZyIiIiCWMhJyIikjAWciIiIgljISciIpIwFnIiIiIJYyEnIiKSMBZyIiIiCWMhJyIikjAWciIiIgljISciIpIwFnIiIiIJYyEnIiKSMKXYAYhsWZHBiCKDEdW1Juhc1PDVOkAul4kdi4jIgoWc6G8KK2pwLKsU2SVVePqb5EaPqZVyDOruibHhPripbwB0LhqRUhIR1WMhJ7qorKoWv5zKR4a+0rJNJgNcHVTQKOUoMhhhrDPj9zOF+P1MIV75IQUz+wfhwbG94OfmIGJyIurMWMiJACRnl+LX0wWoNQmQAejp44IhwTosmhgGN0cVAKDOZEaG3oDdpwrw7ZFsJF0oxfr95/B14gU8NK4X5sf1gErBYSdE1LFYyKlTEwQBf5zV41BmMQAgwN0B43v7wsNJDR+txlLEAUCpkKOnjxY9fbSYH9cD+9OL8NqPp3A4sxgvb0/BjuO5eGd2LII8nMQ6HCLqhNh9oE5LEAT8cqrAUsSHBHtiRr8geDipr/lcmUyGIcE6/O++oXhtZgy0Dkr8ea4EU1b+ht9SC9o7OhGRBQs5dVoHM4qRdKEUMgDjwn0wuIcOclnLRqTL5TL8Y0AXbHtoBGK7uqOsug53fXoQXx481z6hiYj+hoWcOqXUvHIkpOkBAGPCfBAV6Nam9rp4OmHjvUMwPTYQdWYBT2xJwge/nrVGVCKiq2Ihp06npNKIHSfyAAB9u7gjOqhtRbyBRqnAm7P6YOGYEADAS9tSsHo3izkRtS8WcupUzIKAnSfyUGcWEOjuiBG9vKzavkwmw+MTw/Gv8b0AAK/8kIJ1+zKt+hpERJdiIadO5ci5EmSXVkOlkGFChO9Vr4k7qRUwC0KrXudf40Px0Lj6Yr7k22T8kJzb6raIiK6Gt59Rp1FeXWu5Lj6ylzdcL7m17HI0SgXkMhm2J+WgyGBs8ev5uKgxsLsHDmYU44Ev/sSW+4ehTxf31kQnIroiFnLqNP44q0edWUCAmwMiA1yb/bwigxH55TWtes0hPXQorDAivdCA+9YdxncPDoeP9sqzwDk6OrbqdYio8+KpdeoUcsuqkZJbDgAYGeoNWQtvM2stuVyGiZG+8HXVILesGv/8/E/UmsyX3VehUCAiIgIKhaJZbfNUPREB7JFTJ/F7aiEAoLefFr6uHTsvukapwIKRIXhz12kcyizG/P8exMRIvyb7CYIZer0eOp0OMtnVf8f2dFZjcrR/e0UmIglhISe7d6G4ChdKqqCQyTA0RCdKBl9XB7w2MwYLPv8Tv6YWwtNZjW4650b7CIIZuUUVMKldrlnIiYga8KcF2b0DGUUAgN4BWmgdrj7ArT1NivLH4B6eAIAfj+eh0lgnWhYish8s5GTXcsuqca6oEjIZMKCbp9hxMDnKDzpnNapqTfglpQACr3MTURuxkJNdO3SxNx7uq220kplYVAo5JkT6Qi4DzhRU4HRehdiRiEjiWMjJbpVV1yKtwAAA6N/NQ+Q0f/HROmDQxVPsu0/l8xQ7EbUJCznZreQLpRAABHk4QueiETtOIwO6ecLbRYPqOjN+vTiinoioNVjIyS7VmcxIvlAGAIix0qIo1qSQyzC2tw9kAE7lliNTbxA7EhFJFAs52aXj2WWoqjXBWaNAsJeL2HEuy8/VAX2C3AEAv5wqQJ2ZA9+IqOVsupCbTCa8/fbbGDt2LGJiYjB+/Hi89957jUb6CoKAlStXIi4uDjExMZg3bx4yMjLEC0024WBmMQAgOsANCnnHzOLWGkNDdHBSK1BaVYtjWaVixyEiCbLpQv7hhx9iw4YNWLJkCbZt24ZFixbho48+wrp16xrts27dOjz//PPYtGkTHB0dMX/+fNTUtG5ubJK+rOJKpBfWn6qOaMGc6mJQK+UYdnGSmgPpxaiuY6+ciFrGpgt5YmIixo0bh9GjRyMoKAiTJk1CXFwcjh07BqC+N/7ZZ5/h/vvvx/jx4xEeHo5XX30V+fn52LVrl8jpSSzfJF4AUD/ITcwJYJorwt8V3loNjCYzjhe0fJU1IurcbHqK1tjYWGzatAnp6eno0aMHUlJScPjwYTz55JMAgKysLBQUFGDYsGGW52i1WvTp0weJiYmYOnVqi17PZDK1OmvDc9vShpjsKf9Xf9YX8t5+LhCEyy9Q0jz1zxUEcxvbuXZbI3vqsCUxG2nFdcgvq4GP69VH2Te0YUv/X/b0PSRVUj8G5m/aVnPYdCG/9957UVFRgcmTJ0OhUMBkMuGRRx7BjTfeCAAoKCgAAOh0jefP1ul0KCxs+S09SUlJbc5sjTbEJPX83yckI63QAKUccDEbkJtb2eq2/BzMAAJRUlKK3IKSNuW6VlsKAEFaBbLKTfj5ZDZGdXW46gptCqMLgB44deoUqqqq2pTN2qT+PST1/ID0j4H5W8amC/n27dsRHx+PN954Az179sTJkyexYsUK+Pj4YPr06VZ/vejo6GYvIfl3JpMJSUlJbWpDTPaSP7Go/ls6MsANXQK92tSmu7v24t9uMCratmJac9oaozVi/YHzyDeYUaVyRbCX82X3AwCdtr7HHhYW1qZc1mQv30NSzQ9I/xiYv2lbzWHThfzVV1/FvffeazlFHhYWhuzsbKxZswbTp0+Ht7c3AECv18PHx8fyPL1ej/Dw8Ba/nkKhaPObb402xCTl/BoHB/xwPAcA0CfI3QoriNU/XyaTd0hbHs5qhHqqkKKvxR9nitDDywXyK/TKG9qwxf8rKX8PAdLPD0j/GJi/ZWx6sFt1dXWT04sKhcJy+1lQUBC8vb2RkJBgebyiogJHjx5FbGxsh2altjG3cfEQhUKBKmd/FFTUQOugRIj3lXuztizcSwWNUo6iSiNO55WLHYeIJMCme+RjxozB+++/j4CAAMup9U8//RQzZswAAMhkMtx5551YvXo1unXrhqCgIKxcuRI+Pj4YP368yOmpJeQyGbYn5aDI0LpR24JgxpaDGQCA63r7Qqmw6d9Rr0itkKFfV3ckpBVhf3oRQn20kNvwffBEJD6bLuTPPPMMVq5ciaVLl1pOn99yyy1YuHChZZ977rkHVVVVWLJkCcrKytC/f3989NFH0Ghsa25turYigxH55a27/99sNiElv37Q1+Rof+SXVVszWofqE+SGxPMlKKmsxam8cvT2t+174YlIXDZdyF1cXPD000/j6aefvuI+MpkMDz/8MB5++OEOTEa2Jq+sBlV1AjRKOUb08sKWw1liR2o1tVKO/t08sPeMvr5X7qu16dnpiEhc0jz/SPQ3Zy8uVxod6AoHlXQHyTToE+QOR1X91K0nc8vEjkNENoyFnOxC+sXVw2ICbW+ls9ZQKeQY0L1+DfUD6UUwcUEVIroCFnKSvNKqWhQZaiEDEBGgFTuO1UQHusFJrUB5dR1OZLNXTkSXx0JOkpdxcYEULyc5nNQ2PeyjRVQKOQZ29wQAHMosgpm9ciK6DBZykryGlc78XaR/bfzvIgNc4aCSo6y6DmcKKsSOQ0Q2iIWcJM1YZ0ZWcf1tZwFa++mNN1Ap5OgT5A4AOJRZbJkMiYioAQs5Sdr54kqYBAGuDkpo1fZ5i1afLu5QymUoKK/BuaLWLwJDRPaJhZwkLVNfX9i665yuulqYlDmqFIgKqB+NfzizWOQ0RGRrWMhJ0hp6qF09nURO0r5iu7pDJgPOF1chT8Kz1hGR9bGQk2SVVtWitKoWMhkQ6OEodpx25eqoQphv/a117JUT0aVYyEmyGnrjfq4O0Cjt/1u5X9f6CWLO5FdAX9G6OemJyP7Y/08/slud5bR6A2+tBt10ThAA7D2rFzsOEdkIFnKSJLMg4HwnK+TAX73yxPMlKKuuFTkNEdkCFnKSpPzyGtTUmaFWyOHn6iB2nA7TxcMROmc1jHVmbDp4Xuw4RGQDWMhJkhp640EejpB3oiU+ZTIZ+nRxBwB8lpDJxVSIiIWcpOnCxdncgux8tPrlhPtp4ahS4FxRJX5OyRc7DhGJjIWcJMdkFpBd2lDIO8/18QYqhRxDg+sXU/l0b7pV2jRz6lciybK/yanJ7hWU16DWJECjlMPLRS12HFGMDffFntRC/HFWjzd3nIJvG8YJeDqrMTna34rpiKgjsZCT5GQV118fD3R3tNtpWa/F01mNiZG+2JaUi59T8jGut6/YkYhIJDy1TpKTVdJ5r49fat6wHgCAk7nlqKo1iZyGiMTCQk6SYjYLyL5YyO19WtZrGdjdA/5uDjCZBZzILhM7DhGJhIWcJCW/4tLr4xqx44hKJpNhSI/6QW9JF0q5VjlRJ8VCTpKSffG2swB3R8g76fXxS8UEuUOtlKO0qpZrlRN1UizkJCkNt50FuHee2dyuRq2Uo7df/apoSRdKRU5DRGJgISfJEAQB2SX1a3EHuHXu6+OXig50AwCkFRhQzvnXiTodFnKSjJKqWlTVmqCQy+Dj2rmvj19K56JBoLsjBADJHPRG1OmwkJNk5FzsjftoNVDK+a17qZig+l758QulnH+dqJPhT0OSjL+uj/O0+t+FeLvASa2AwWhCWmGF2HGIqAOxkJNkNNw/HuDGgW5/p5DLEBngCgBIyuKgN6LOhIWcJKHKaEJxZf1ALn/2yC8rKqD+9Pr54ioUVxpFTkNEHYWFnCQh5+JpdU8nNRxVCpHT2CZXRxW66+pXgzvOQW9EnQYLOUlCbln9QDc/nla/qqiLt6KdyC7joDeiToKFnCQhr6wGAODXhuU6O4PuOmc4qRWoqjUhvdAgdhwi6gAs5GTzBEFgj7yZFHIZIvzrB70lZ3PQG1FnwEJONq+4shbGOjOUchl0zmqx49i8htHrmfpKlFVxpjcie8dCTjavoTfuo9VALudCKdfi7qS2rNV+IoeD3ojsHQs52by8Up5Wb6mGW9GOZ5fBzOVNiewaCznZPMv1cQ50a7YQb2c4KOWoqKnDOT2XNyWyZyzkZNPqTGYUVtSPWPdlIW82pUKOcA56I+oUWMjJphVU1MAsAE5qBbQOSrHjSErDoLf0QgMMNXUipyGi9sJCTjYtt/Sv0+oyGQe6tYSXiwZ+rg4wC8BJDnojslss5GTTGq6P87R660QFNpxeL4PAQW9EdomFnGxaLkest0kvHy1UChlKq2px4eLqcURkX1jIyWZVGutQVl1/bdfXVSNyGmlSK+UI89UCAJIv8PQ6kT1iISeb1TC/uqeTGholVzxrrYaFVM4UVKC61iRyGiKyNhZyslkNp9V93dgbbwsfrQZeLmqYzAJO5ZaLHYeIrIyFnGwWJ4KxDplMhsiLM70lZ5dy0BuRnWEhJ5skCALyWMitJtxPC4VchsIKI/LLa8SOQ0RWxEJONqmkqhY1dWYo5DLoXHhqva0cVAqEeDsDqJ9/nYjsBws52aSCi71GbxcNFFzxzCoaTq+fyitHnckschoishYWcrJJDad/vbXsjVtLFw9HuDooYawz40x+hdhxiMhKWMjJJjX0yH1YyK1GJpMhIuCvmd6IyD6wkJPNEQThr1PrLORWFXFxRbQLJVUoqTSKnIaIrIGFnGxORU0dqmpNkMsAnbNa7Dh2ReugQjedEwAOeiOyFyzkZHMaro97OquhVPBb1Noaljc9mVMGs5n3lBNJHX9Kks3hafX2FezlAkeVAgajCRlFBrHjEFEbsZCTzcm3DHTjRDDtQSGXIdy/fiGV41xIhUjybL6Q5+XlYdGiRRg8eDBiYmJwww03ICkpyfK4IAhYuXIl4uLiEBMTg3nz5iEjI0O8wNRm7JG3v8iLg97S9QaUV9eKnIaI2sKmC3lpaSlmz54NlUqFDz/8EFu3bsUTTzwBNzc3yz4ffvgh1q1bh+effx6bNm2Co6Mj5s+fj5oaTkMpRZXGOlTU1C9d6s0Z3dqNzkUDP1cHCAKQeL5E7DhE1AZKsQNczYcffgg/Pz+sWLHCsq1Lly6WfwuCgM8++wz3338/xo8fDwB49dVXMWzYMOzatQtTp07t8MzUNg29cXcnFdRKm/49U/IiA12RW1aNw5nFEAQBMhln0COSIpsu5D///DPi4uLw0EMP4eDBg/D19cVtt92GWbNmAQCysrJQUFCAYcOGWZ6j1WrRp08fJCYmtriQm0ytX6u54bltaUNMYudXKBQQBDPyLy6U4uOigSA0fxrRhtHXDYOwBcHcoudfodUObctyDGYBcvm1Xq/t2Xp5O+PX0/ULqRzKLEa/Lm7XftJViP091FZSzw9I/xiYv2lbzWHThfz8+fPYsGED7rrrLixYsABJSUlYvnw5VCoVpk+fjoKCAgCATqdr9DydTofCwsIWv96l195byxptiEmM/I6OjoiIiIBer8e5wlIAgANqkJub2+K2ykpLAQSipKQUuQUlbcrl52AWpa38/LwOyxakVSC9pA4bD5yHc2UuqqqqWt1WA34GxCf1Y2D+lrHpQi4IAqKiovDoo48CACIiIpCamoqNGzdi+vTpVn+96OhoKBSKVj3XZDIhKSmpTW2IyRby63Q6lNcWATAhOMALfp5OzX6u2SwgPz8PrhfHT7i7u8GoaNuod3d3bYe21XAMPj6+kF9joRhrZRvgWI30wxewLSkHz04dA61D638k2ML3UFtIPT8g/WNg/qZtNYdNF3Jvb2+EhIQ02hYcHIwff/zR8jgA6PV6+Pj4WPbR6/UIDw9v8espFIo2v/nWaENMYuavqRNQWlU/gtrH1REyWfOvkTecim6ofzKZvEXPv0KrHdqW5Rjksma8nnWy+bs5wlurQUF5DbYl5+G2wV1b3VYDfgbEJ/VjYP6WsenRRP369UN6enqjbRkZGQgMDAQABAUFwdvbGwkJCZbHKyoqcPToUcTGxnZoVmq7nNL66+NaByUcVdL9EEuJTCbDgK4eAIAvD50XOQ0RtYZNF/K5c+fi6NGjeP/995GZmYn4+Hhs2rQJt912G4D6H0J33nknVq9ejZ9++gmnTp3Cv//9b/j4+FhGsZN0ZJfUX5/limcdq29XdyjlMhw9X4KUXE4QQyQ1Nl3IY2Ji8O6772Lr1q24/vrr8Z///AeLFy/GjTfeaNnnnnvuwZw5c7BkyRLMnDkTlZWV+Oijj6DRsBhITUOPnPePdywXjRLje/sCAL48yF45kdTY9DVyABgzZgzGjBlzxcdlMhkefvhhPPzwwx2YitpDdml9j9zblYW8o90yqAt+OJ6LrxMv4MnJ4dAoeWmDSCpsukdOnUd1rckyGYyPC+dY72gje3nD380BJZW12Hni2re/EZHtYCEnm5CSWw6zADiqFHDWsDfY0RRyGWb2DwLA0+tEUsNCTjYh+UL9RDA+Wg2nChXJP/rXT3/8+5lCZBVXipyGiJqLhZxswvHs+tHSXPFMPF11ThjeUwdBAP53KEvsOETUTK0q5OPGjUNxcXGT7WVlZRg3blybQ1Hnczz7rx45iWfWgPpe+ebDWTA1TFxPRDatVYX8woULMJubLtRgNBqRl8eBMtQytSYzUnLLAbBHLraJkX5wc1ThQkkV9p5p+XoFRNTxWnT72U8//WT592+//QatVmv52mw2IyEhwTLrGlFzncmvgLHODI1SDjdHldhxOjUHlQLT+gZgbUImNhw4h5Gh3mJHIqJraFEhX7hwIYD6e7effPLJxg0plQgMDGyynehaGga6Bbg5cKCbDZg9uCvWJmRi54k85JdVw8eVtwMS2bIWFfKUlBQAwNixY7F582Z4enq2SyjqXBoGugW4O4qchAAg3M8VA7p54FBmMb48eB4PjusldiQiuopWXSP/+eefWcTJahoGuvm7sednK+YM6QYA2HDgHAe9Edm4Vk/RmpCQgISEBOj1+iYD31asWNHmYNQ5mM0CTrBHbnMmRfnBI16F7NJq/JKSj/ERvmJHIqIraFWP/N1338Xdd9+NhIQEFBcXo6ysrNEfoubK0BtgMJqgUcrhxcVSbIaDSoF/XLwVbf3+TJHTENHVtKpHvnHjRqxYsQLTpk2zchzqbBquj/f2d4VCzoFutuS2QV3xwa9p2H26AOeLKtHF00nsSER0Ga3qkdfW1qJfv37WzkKdUPLF6+ORAa4iJ6G/6+7ljBG9vCAI9dfKicg2taqQz5w5E/Hx8dbOQp3Q8Qv1PfKoQDeRk9Dl3D64KwBg06HzMNY1nQSKiMTXqlPrNTU12LRpExISEhAWFgalsnEzTz31lFXCkX0TBMEyYj0ywBVJWaUiJ6K/G9fbF76uGuSV1WDHiVxcHxMgdiQi+ptWFfJTp04hPDwcAHD69OlGj3FCD2qu7NJqFFfWQimXIdRXy0Jug1QKOW4Z2BXv/JSKz/dlspAT2aBWFfJ169ZZOwd1QscvzujWy1cLBxXXILdVswd1wbs/p2JfWhHO5Fegp4+L2JGI6BJcxpREk3xxxDoHutk2fzdHjOtdfx/5F/s56I3I1rSqR37HHXdc9RT6Z5991upA1Hk09MijWMht3u2Du2LniTxsPnwej08Mg6OaZ1CIbEWrCnnv3r0bfV1XV4eTJ08iNTWV95ZTszXcQx7JEes2b2Qvb3TxdMT5oirEH83GrIFdxI5ERBe1qpAvXrz4sttXrVqFysrKNgWizqGwoga5ZdWQyeongyHbJpfLMGdwN6zYnoJP/8jAPwYEcWArkY2w6jXyG2+8EVu2bLFmk2SnGnrjPXTOcNG0esp/6kC3DuwKR5UCJ3PKsD+9SOw4RHSRVQt5YmIi1Gq1NZskO9WwBjlPq0uHm5MKN/cLBAB8ujdd5DRE1KBVXaEHHnig0deCIKCgoADJycn45z//aZVgZN9OcMS6JM0b1h3r95/DzhN5nH+dyEa0qkeu1Wob/XFzc8OgQYPwwQcfNCnyRJfTMMd6VAB75FLSy1eLEb28YBaAzxIyxI5DRGhlj5zrjVNblFXXIlNfPyiSPXLpuWt4d/yWWoiNB8/jX+ND4cwxDkSiatMnMDk5GWfPngUA9OrVCxEREVYJRfat4bR6oLsjPJw5pkJqRof6oIeXM9ILDfjqzyzcMbS72JGIOrVWFXK9Xo9HHnkEBw4cgKtrfY+qrKwMgwcPxltvvQVPT0+rhiT7Yhnoxt64JMnlMswd2g3Px5/Ap39k4PbB3SDnWvJEomnVNfIXXngBBoMBW7duxYEDB3DgwAF8//33qKiowPLly62dkezMXwPdeH1cqmb0D4KLRom0AgP2nC4QOw5Rp9aqQv7bb7/hueeeQ0hIiGVbz5498dxzz+HXX3+1WjiyT5aBboHskUuV1kGF2YPqZ3db8+tZkdMQdW6tKuRmsxkqlarJdqVSCbPZ3OZQZL+qjCacya8AwB651N0d1wNKuQz70opw5HyJ2HGIOq1WFfIhQ4bgxRdfRF5enmVbXl4eVqxYgaFDh1otHNmflNwymAXAy0UNX1eN2HGoDfzdHHFT3/oJYj5gr5xINK0q5EuWLEFFRQXGjRuH8ePHY/z48Rg3bhwqKirw7LPPWjsj2ZGGpUsjAtw4V7cduHdkMABge3IuMvQGkdMQdU6tGrXu7++Pr7/+Gn/88QfS0tIAACEhIRg2bJhVw5H9OZHNpUvtSZifFmPDffBzSj4+/j0DM7qJnYio82lRjzwhIQFTpkxBRUUFZDIZhg8fjjvuuAN33HEHoqOjMXXqVBw6dKi9spIdSL7AEev2pqFXvvnPCyipNomchqjzaVEhX7t2LWbNmgUXF5cmj2m1Wtxyyy349NNPrRaO7EutyYxTueUAOGLdngzu4Yk+XdxhrDNj+xkuY0zU0VpUyE+dOoURI0Zc8fHhw4fj+PHjbQ5F9ik1rwJGkxlaByW6crENuyGTybDgYq/8hzOVqKipEzkRUefSokJeWFgIpfLKl9WVSiWKirhOMV3e8YvXxyP8XTnQzc5MiPRDDy8nVNQKWLcvU+w4RJ1Kiwq5r68vUlNTr/j4qVOn4O3t3eZQZJ+OXxyxHsU1yO2OQi7DwtH1E0R9/HsGDOyVE3WYFhXyUaNGYeXKlaipqWnyWHV1NVatWoUxY8ZYLRzZF86xbt9uiPGHn4sCxZW1+CyBvXKijtKi28/uv/9+7NixAxMnTsTtt9+OHj16AADS0tLwxRdfwGQyYcGCBe0SlKTNZBYsPfKYIPbI7ZFSIcfM3i5492ApPvwtDXcO7cYlTok6QIs+ZV5eXti4cSOef/55vPnmmxAEAUD9YJe4uDgsWbIEXl5e7RKUpO1sQQWqak1wUivQw6vpXQ9kH0Z2dcB3Z2txrqgSn+/LxH2jQq79JCJqkxb/uhwYGIgPP/wQpaWlyMysP33WrVs3uLmxl0VXdiyrYSIYNyi45KXdcnF2wsIx3nhiSzI++DUNdwztBic1e+VE7alVU7QCgJubG2JiYhATE8MiTtfUcH2cA91sj5NaAfPFs2ttoVAoEBERgemxQejq6QS9wYjPOYKdqN3xV2XqEMeySgDw+rgt0igVkMtk2J6UgyKDsdXtCIIZiroqzB4RgQfG9sS/Nx/Dmj1puG1wN7jwWjlRu+Gni9pdncmMEzm89czWFRmMyC9vekdKcwmCGQpj/cxu02MDsXr3WaQXGvDhr2l45LpQa8Ukor9p9al1ouY6U1CB6loznNUKBHs5ix2HOoBKIcfjE8MAAB/+lob88mqRExHZLxZyandJFwe6RQa6Qc6Bbp3G5Cg/9OnijkqjCat+OiN2HCK7xUJO7S7p4kC3GJ5W71RkMhmemhwOANhw4BzSC7leOVF7YCGndtdQyKM50K3TGRKsw9hwH9SZBbz2Y4rYcYjsEgs5tas6kxknLs7oFs0eeaf0xKRwyGXAtqRcJJ4rFjsOkd1hIad2lZpfgZo6M1w0SnTXcaBbZxTmp8WMfkEAgJe2nbTMCElE1sFCTu2qYaBbVKArB7p1Yo9OCIWjSoGDGcX49ki22HGI7AoLObUry/Vxnlbv1PzdHPHA2J4AgBe3nUR5da3IiYjsBws5tau/Brq5ixuERPd/I3qgh5czCspr8M5PqWLHIbIbLOTUbmovmdGNPXLSKBV47oYIAMCnezOQmlcuciIi+yCpQv7BBx8gLCwML774omVbTU0Nli5disGDByM2NhYPPvggCgsLRUxJDVLzKmCsM0ProEQ3Tyex45ANGB3mg+sifFFnFvDcd8c58I3ICiRTyI8dO4aNGzciLCys0faXXnoJv/zyC95++22sW7cO+fn5eOCBB0RKSZdKulACoH7pUg50owZLro+ARinHH2f12JqUI3YcIsmTRCE3GAx4/PHHsXz58kZLppaXl2PLli148sknMXToUERFReGll15CYmIijhw5Il5gAvDXGuScCIYu1cXTCfePDgEALI0/gZLK1q+4RkQSWf1s2bJlGDVqFIYNG4bVq1dbticnJ6O2thbDhg2zbAsJCUFAQACOHDmCvn37tuh1TCZTqzM2PLctbYipPfI3TP7RJ9D1mu0qFAoIghmCYG7Va5nN9adoL/7VprYuabVD27Icg1mAXH6t1+vYbM1qxSxAcfHf1/r/vjeuO74/mo0zBQYsjT+O12fGtPp1rUXqn2FA+sfA/E3bag6bL+Rbt27FiRMnsHnz5iaPFRYWQqVSwdXVtdF2nU6HgoKCFr9WUlJSq3M2SElJQURkJJQKxbV3boY6kwknjh9HbW3H3K5jjfcAAKrqzEjJqR/MpCq/gCNHcq+4r6OjIyIiIqDX65FbVNGm1y0rLQUQiJKSUuQWlLSpLT8Hsyht5efn2Wy2awn0dAEAnDp1ClVVVVfdd360Bot/NuDrxGz0dq5Cf39Nm17bWqz1GRCT1I+B+VvGpgt5Tk4OXnzxRXzyySfQaNr/Qx4dHQ1FKwuwyWRCUlISevfuDaVCgW3HslFkaP3azgDg6azBlJgAREZGtqmd5mjI35b34FL70vQwIx9+bg4YN7R/s56j0+lgUru06vXMZgH5+XlwvXjpxd3dDUaFQ6vaauDuru3QthqOwcfH95pjCjo6W3OYzQJQV78wyt/HslxOXwBnalLw8d4MfHKsErPG9IPWQdXq128ra38GxCD1Y2D+pm01h00X8uPHj0Ov1+Pmm2+2bDOZTDh48CDWr1+Pjz/+GLW1tSgrK2vUK9fr9fD29m7x6ykUija/+XJ5/bCD4spaFFS0rRctk8ktuTqKNd4DADh6of62s/5dPZrdnkwmtxxzSzWcim6of21p65JWO7QtyzHIZc14vY7N1qxWLrkc0Nz/80UTw/FTSj4y9JV45cfTWHGz+KfYrfUZEJPUj4H5W8amC/mQIUMQHx/faNtTTz2F4OBg3HPPPfD394dKpUJCQgImTpwIAEhLS0N2dnaLr4+Tdf2ZWQIAiO3qLmoOsm2OagVemRGDWz7Yhw0HzmNKtD9G9Gr5L+FEnZlNF3IXFxeEhoY22ubk5AR3d3fL9hkzZuDll1+Gm5sbXFxcsHz5csTGxrKQi0gQBBw5Xz/QjYWcrmVwsA5zh3bD2oRMPLbpKH7410h4OqvFjkUkGZK4/exqFi9ejNGjR+Ohhx7CnDlz4OXlhVWrVokdq1PLKq5CYYURKoUMkQG89Yyu7cnJvdHTxwX55TV4/H9HOVEMUQvYdI/8ctatW9foa41Gg+eeew7PPfecSIno7/68eNtZRIAbHFTSvc5FHcdRrcCq2bG46b29+CklH2v/yMC84T3EjkUkCZLvkZPtSTxXAgDox9Pq1AK9/V3x9JTeAICXtqfgRHaZyImIpIGFnKyuYSKY2K4eIichqblzaDeM7+0DY50ZD274E5XGOrEjEdk8FnKyqupaE45f7EnFdnEXNwxJjkwmw6sz+8BHq8HZAgMWf5XE6+VE18BCTlaVfKEUdWYB3loNgjwcxY5DEuTprMY7s2OhkMvwzZFsfLo3Q+xIRDaNhZysquH6eGwXd8hkXPGMWmdIsA6LL14vf3HbSexL04uciMh2sZCTVf3J6+NkJXcP746b+gbAZBbwwBd/Iqf06nO3E3VWLORkVRyxTtYik8nw8s0x6O3visIKIxZ8/ieqa6W5KhZRe2IhJ6vJKa1Cblk1FHIZ1yAnq3BUK7BmTn+4Oapw9HwJnthyjIPfiP6GhZyspmF+9d7+WjipJTfXENmorjonvHdbPyjkMnx7JBvv/HRG7EhENoWFnKzmUGYRAKAfr4+TlcX18sLyaVEAgLd2nca3Ry6InIjIdrCQk9UcSK8v5IN6eIqchMSidVDDbMVT35e2NXtQV9wzon7a1sc3H8Phi784tqYtInvC859kFWXVtTiRUz8RzKDuLOSdlYNaCblMhu1JOSgyGNvUVnedE4b38m7UVldPJ/T20+Jkbjnu/PgA7hsZDJ2L5ppteTqrMTnav015iGwVCzlZxaGMIggC0MPLGT6uDmLHIZEVGYzIL69pUxseTurLtjUm3Af6i9s+3puBWQOCOCaDOjWeWier2N9wWp29cWpnKoUcN/YJgKuDEqVVtfj2SDaMdWaxYxGJhoWcrILXx6kjOWuUmBYbCEeVAvnlNdiWlAOTmdfAqXNiIac2qzTWISmrFAALOXUcDyc1buwTAKVchsyiSvx0Mo/3mFOnxEJObZZ4rgR1ZgEBbg5cKIU6lJ+bA6ZE+0MmA07mluOPs5yTnTofFnJqsz/OFgIABgfruFAKdbgeXs4YF+4DADiUWYyj50vEDUTUwVjIqc32nqnvBQ0L0YmchDqryAA3DA2u//7bfboAqXnlIici6jgs5NQmpVW1OJZVAgAY3tNL3DDUqQ3s7oGYwPo5/n88noes4kqRExF1DBZyapP9aXqYBSDYyxkB7rw+TuKRyWQYFeaNEG9nmAQB8cdyUFjRtnvZiaSAhZzaZO+Z+uvjw3rytDqJTy6TYVKkHwLcHGCsM+PbI9koq64VOxZRu2IhpzbZe3GUcBxPq5ONUCrkuKFPADyd1aioqcO3R7JRZeQ65mS/WMip1bJLqnAmvwIyGTAkmD1ysh0OKgWm9Q2As0aBIoMRXxw4x9nfyG5xgmJqtYZ7dv3dHLD1WE6r22lYHIPImrQOKtzUJxD/O3weaYUGPPnVMbzxjz68RZLsDgs5tdovp/IBAEHuTm1aIKNhcQwia/PWajAlyh/xx7Lx1Z8X0NXTCf8aHyp2LCKr4ql1apU6kxm/ni4AAHT3chI5DdGVdfdyxg19AgAAb+9KxebDWSInIrIuFnJqlcOZxSivroOTWgFfLltKNm5Qd0/cPzoEAPDklmOWuy2I7AELObXKL6fqe+O9fFwg5zVHkoDHJ4Thhj4BqDMLWPD5YZzm7G9kJ1jIqVV2X7w+HuanFTkJUfPI5TK8NjMGA7t7oLy6Dv+39hCKDcZG+zg6clIjkh4Wcmqx7JIqpOSWQy6r75ET2TontQJmQYCDSoE1dwxAF09HnCuqxMIv/kStqf62NIVCgYiICCgUima1aeaSqWQjOGqdWmzH8VwAQL+uHnBSK1FRw8k2yLZplArIZTJsT8pBkcGIaX0CsebXNPxxVo87P96P62MCIAhm6PV66HQ6yGRX7+N4OqsxOdq/g9ITXR0LObXYDxcL+aQoP5GTELVMkcGI/PIayOUyTIj0xffHcpCQVgQntRKRAVrkFlXApHa5ZiEnsiX8bqUW0VfU4EB6EQBgYiQLOUlXiLcLhgR7AqifEyG7pErkREStw0JOLbLjRB7MAhAd6IYunrx/nKRtUHdP9PRxgVkAtiblwVDLaVxJeljIqUV+SOZpdbIfMpkMEyJ84eWiRlWtCXvP11gGvxFJBQs5NVtpVS3+OFs/kQYLOdkLlUKOG2IC4KiSo6TajF9OFUDgiHSSEBZyarZtSTmoNQkI89UixJu3nZH9cHVUYXKUH2QAUnIrkHyhTOxIRM3GQk7N9tWf9XNUT+8XKHISIusL8nBEtI8KALDndAFyy6pFTkTUPCzk1Czn9JU4mFEMmQyY1peFnOxTmE6FYC9nmAQB25JyUFXLORLI9rGQU7N8nXgBABDX0wt+blwkheyTTCbDdRHecHNUoby6Dj8m53IGN7J5LOR0TYIg4KvE+tPqN/O0Otk5jVKBqdH+UMplyCyqtMybQGSrWMjpmhLO6pGpr4STWsFJYKhT8NZqMDbcBwCwP70IGXqDyImIroyFnK5pbUIGgPreuJOas/pS59Db3xVRga4AgB+Tc1FWVStyIqLLYyGnq7pQUoWdJ/IAAHcO7S5uGKIONqqXN3y0GlTXmbE1KQd1Zk4WQ7aHhZyuav2+TJgFYFiIDqG+XHucOhelQo6p0f5wUMqRX16DPacLxI5E1AQLOV1RldGEjQfPA2BvnDovV0cVJl6cyTD5QhlO5nCyGLItLOR0Rev3Z6LIYEQXT0eM7+0jdhwi0XTXOWNwj/qV0n5OyUduKSeLIdvBQk6XVWU04f09ZwEAD4zpCaWC3yrUuQ3u4YluOifUmQWsP3AOpRz8RjaCP53pstbvz0RhhRFBHo64uV+Q2HGIRCeTyTAx0g9aByWKDEYs+t9RLq5CNoGFnJooq6619MYfHNsTKvbGiQAAjioFpkT7QyGXYeeJPLy/J03sSEQs5NTUmztOo7DCiGAvZ/bGif7Gz9UB18f4AwBe+zHFsrQvkVhYyKmRE9ll+OziBDBLb4pkb5zoMgZ288CMfkEwC8BDGxI5+I1ExZ/SZFFnFvDsd8dhFoCp0f4Y0ctb7EhENkkmk2H5tCj09ndFYYUR/1x/GMY6ThZD4mAhJ4svkitw5HwptBolnrm+t9hxiGyao1qB9+f0g9ZBiT/PlWDF9pNiR6JOioWcANTfG/vtqfqFIV6dGQN/N0eRExHZvm46Z7w5qy8A4NO9GfjuaLa4gahT4goYNqS40oiMQgMKymtQUlULGYAvD52Hj1aDLp5O6BPkjoE9PBHobt0ieyijCA9/eRQAcOfQrpgc7W/V9ons2XURvvjn6BD8Z/dZ/HvzUQR7OSMq0E3sWNSJ2HQhX7NmDXbs2IG0tDQ4ODggNjYWixYtQnBwsGWfmpoavPzyy9i2bRuMRiPi4uLw3HPPwcvLS8TkzScIAs4WGHA4sxi5ZU0HzGRfZhBNVKArJkX6YVKUH3r6tG3+88OZRZj36UFUGk2I8VHjyUnhbWqPqDN6bEIYjmeXYc/pAtz72SF8+0AcvLUasWNRJ2HThfzAgQO4/fbbER0dDZPJhDfffBPz58/H1q1b4eTkBAB46aWXsGfPHrz99tvQarV44YUX8MADD2Djxo0ip782fUUNfk7JtxRrmQzo6uEEfzcHeDqr4aXVYGQvb+SVV+NMfgUSz5XgWFYJki+UIflCGV7fcRq9fFwwLTYQN/YJQBdPp2a/tiAI+GRvBl7efhK1JgFDgj3xUB8VNEpebSFqKYVchndmx2L6e3uRVmjAgs8P44t7BkOjVIgdjToBmy7kH3/8caOvX375ZQwdOhTHjx/HwIEDUV5eji1btuD111/H0KFDAdQX9ilTpuDIkSPo27evCKmb50ROGX5JyUedWYBSLkNsV3f0CXKHs+av/xIfrQbjI3wbPU9fUYNdJ/PwQ3Iufj9TiNT8Crz24ym89uMp9O/mgclRfhgb7oMeXs6QyWRNXtdsFrAntQCrfkrFn+dKAACTIv3w2swonD6R3K7HTGTP3BxV+HDuAEx7by8OZxbj2W+S8cqMmMt+DomsyaYL+d+Vl5cDANzc6q8/JScno7a2FsOGDbPsExISgoCAgFYVcpPJ1OpsDc81m81QKBQQBDMEoentKIIg4PczeiSeLwUAdPGoX5BE66C8+Lj5kn3NTXK5Oyoxs18gZvYLRFlVLX48nofvjuUgIU2Pw5nFOJxZjOVbT8LbRYOYIFcEuDvC3VGFSqMJ2aVV2J9WhKLK+jmiNUo5Fk8Ox+2Du8Bsbvpa13K142wZs+V4W9uW2Vw/VebFv2wmV0vashyDWYBcfq3X69hszWrF/Nd0pbaUq7ltteT9v9xnEwC6ezrinVv7YP7aw9h0KAs9vZ0xP65HG7M3X0OetvwsExPzN22rOSRTyM1mM1566SX069cPoaGhAIDCwkKoVCq4uro22len06GgoOXrBiclJbU5Z2pqKiIiIqDX65FbVNHoMUEQcDjXiLTiOgBApLcKEV4yGEoKYbhMWwqjC4AeOHXqFKqqqi77er2UwGP9VCjq7Y0/zlfjUE4NThYYUVBRg59SLv8eOCpluC7YETeGOcPDoQhHjxZZHmvue+Do6HjF42wpPwczgECUlJQit6CkTW2VlZZarS1r5mpJW/n5eTab7VoCutevkmdruaz9/l/ts+kK4M4YLf57tBwrtp9CTXEehnVxaHX21rDGzzIxMX/LSKaQL126FKmpqfjiiy/a7TWio6OhULTumpbJZEJSUhJ69eoFoP6XCZPaxfK4IAj4NVWPtOJKAMC4cG9EBrhetq0GuouDZcLCwpqVYWz91QVUGU04nlOGE9llyC+vQWlVLZw1Sng6q9Gviztigtyg/tu18Ib8LX0P/n6creHurr34txuMitb9wDObBeTn58H14tmatrRlzVwtaavhGHx8fCGXX/10bEdna476Hq1gc7ma21ZL3v9rfTb79BFgcjiJdfvPYdWhMgyMDsXA7p5tOILmae3n2FYwf9O2mkMShXzZsmXYvXs3Pv/8c/j5+Vm2e3l5oba2FmVlZY165Xq9Ht7eLZ+VTKFQtPnNl8vrC6RMJodM9lexTDxfjKNZ9afTJ0b6Itzv6kW8oY2GXC3h4qjA4GAvDA5u+cj9lr4Hfz/O1rn8e9aiFi6eCm34+WsruVrSluUY5LJmvF7HZmtWK3IzGgq5LeVqblstef+b89l8/qYo5JbXYOeJPNz3eSK23D+0zXeZNJc1fpaJiflbxqaHKAuCgGXLlmHnzp1Yu3YtunTp0ujxqKgoqFQqJCQkWLalpaUhOzvbpga6pRVW4LfU+oUVRvT0alYRJyJpU8hleOfWWMR2dUdpVS3mfnIQeZe5xZSorWy6kC9duhTfffcd3njjDTg7O6OgoAAFBQWorq7/MGi1WsyYMQMvv/wy9u3bh+TkZCxevBixsbE2U8jLqmqx43j9NbfoQDfEdnUXNxARdRhHtQIfzx2IHl7OuFBShTkf7Ye+okbsWGRnbPrU+oYNGwAAd9xxR6PtK1aswM033wwAWLx4MeRyOR566KFGE8LYApNZwLbkHNTUmeHrqsGoUG/eikLUyXg6q/HZ3YPwj/cTkJpfgTs+PoAN9wyBm5NK7GhkJ2y6kJ86deqa+2g0Gjz33HM2U7wvdSC9CHllNdAo5ZgS5Q/FNQbQEJF96uLphPX3DMYta/bhRE4Z7vxkPz7/v8HQOrCYU9vZ9Kl1KcsqrsLBzPrbusaF+8DVkR9Yos4sxNsF6/9vMDycVDiaVYq7Pj0IQ02d2LHIDrCQt4OaOhO2/JkFQQBCfVzQy7djRqoSkW0L89Ni3fzBcHVQ4lBmMeZ8vB8llUaxY5HEsZC3gzV70pBfXgNHlQKjw3zEjkNENiQq0A3r5g+Gu5MKiedKcMuafcjnaHZqAxZyK8vUV+LdX84AAEaFesNRLd17IYmoffTp4o4v7x0KH60Gp/LK8Y81CThfVCl2LJIoFnIrEgQBz8efgLHOjBBvZ4T6tm3GMyKyX2F+WmxeMAxdPB2Rqa/EzPf/wPHsUrFjkQSxkFtRmVHAr6mFUCvkuLFPAG81I6Kr6qpzwuYFwxDq64K8shr84/0E7DieK3YskhgWcity08jxwk0R+HDuAHi5aMSOQ0TtxEmtgFkQrr1jM/i6OmDTfUMxopcXKo0m3Pf5Yby/5ywEK7VP9s+m7yOXotsGdYVCocD6fZliRyGidqJRKiCXybA9KQdFhraNOvd0VmNytD8+mTcQy+JPYN2+TLy8PQWpeRV4cXoUHFQcZ0NXx0JORNRKRQYj8sutM+WqSiHHC9Oi0NPHBUvjj2PLn1k4mVOG1XP6oZvO2SqvQfaJp9bJwtHRUewIRJ3e3GHd8dndg+HprMaJnDJc/87v+CE5R+xYZMNYyDuRq13TUygUiIiIkPTSgUT2Iq6XF7Y9NAIDunmgvKYOCz7/E8viT6C61iR2NLJBPLXeiVztmp4gmKHX66HT6Zq19nN3nROG92r5mu9E1Dx+bg7YcO8QvPbjKXzwaxo+2ZuOP84W4q1b+qK3P5dCpr+wkHcyV7qmJwhm5BZVwKR2aVYh93BSt0c8IrqESiHH4im9MbiHJ57YcgwpueW46d29WDQxFP8XFww5F2Ii8NS6TbPmLS5EJF3jevvih3+NxPjevjCazHhpWwpu+2gfsoo5GxyxR27TrHmLC0+FE0mbl4sGH97ZH18ePI9l35/AvrQiTH77Nyy9KRLTYwM5AVUnxkIuAda4xYWnwomkTyaT4dZBXTE0RIdHvjyCP8+V4NFNR/FDci5enB4NTyf+SO+MeGqdiEhiuumcsem+oXh8YhhUChl2nMjDxLd/xfbkXKhUKrHjUQdjISciElFrx8IoFXIsHNMT3y6MQ29/VxQZjHhgwxF8mFzHNc47GZ6HISISkTXGwtw6MAi/pBTg19QCxB/Lwb60Irw8IxrjevtaOS3ZIhZyIiIb0NaxMH26uCPczwU7T+bjbIEB89cewqwBQXjm+gi4OvB0uz3jqXUiIjsR5OGIrQ+NwPy47pDJgE2HsjDprV+x90yh2NGoHbGQExHZEQeVAosnh2PTfUPR1dMJ2aXVuP2j/VjybTIqjXVix6N2wEJORGSHBnb3xPaHR+COId0AAJ8lZGLyyt9wMKNI5GRkbSzkRER2omEEfMPiR84aJV6YFoXP5w9GgJsDMvWVmLUmAS9uPYGaumsvwMKZJaWBg92IiOyEg6p+BPy2Y9korqxt9Nj8uB7YmpSDP8+V4MPf0vH9sRzcMqALvLWay7bl6azG5Gj/johNbcRCTkRkZ4oMNSioqG2yfUQvbwS6O2LXyXzklFbj3V/OYHSYNyL8XTnFq4Tx1DoRUScS7O2C2wd3RRcPR9SZBew6mY8fknObdaqdbBMLORFRJ+OsUWJ6bCCGheggkwGn8yvwxf5zyCmtEjsatQILORFRJySTyTCwuydm9e8CVwclyqrr8L/DWTiYUcRBbhLDQk5E1In5uTngtsFdEerrAkEA/jirx9eJF1BW1fQaO9kmFnIiok5Oo1RgUqQfruvtC5VChqziKqz65Qx2ncgTOxo1Aws5ERFBJpMhIsAVswd1hbdWg0qjCf/32SEs+TYZ1bUcCGfLWMiJiMjCw0mNWQOCMDxEB6B+RrgbVv2OkzllIiejK2EhJyKiRpRyOaZE++OzuwfBW6tBan4Fbnp3Lz7+PR1mMwfC2RoWciIiuqyRod744eERGBfuA6PJjBe+P4F5/z2I/PJqsaPRJVjIiYjoinQuGnw0dwBeuCkSGqUcv54uwIS3fsW3Ry5A4G1qNoGFnIiIrkomk+GOod3x/YNxiPB3RUllLR7eeAQLPj+MgvIaseN1eizkRETULL18tfj2geF4ZHwolHIZfjyehwlv7cFXf2axdy4iFnIiImo2lUKOh8f3wncP1PfOiytr8eimo7j1g31IzSsXO16nxEJOREQtFhHgim8fGI5/TwqDg0qO/elFmLzyN7y8PQWGmjqx43UqLORERNQqKoUc/xzdEzsfGYXxvX1QZxbw/p6zGPXabny+LxO1JrPYETsFFnIiImqTLp5O+GjuQHxwR3900zmhsKIGz3yTjIlv/4ofknN5/bydsZATEZFVTIj0w85HRuH5GyLg6axGWoEBCz4/jCnv/I7vj2XDxMlk2gULORERWY1aKce84T2w5/HRWDgmBM5qBU7mlOGBLxJx3Zt7sOng+avO3e7o6NiBae0DCzkREVmd1kGFxyeGY++TY/Gv8b3g5qhCWqEB/95yDENX/ISXt6fgfFFlo+coFApERERAoVBcs32umf4XpdgBiIjIfrk7qfGv8aH4vxHB+GJ/Jt7fnYaiSiPe33MWa/acRaivFrFd3RHup4VSDuj1euh0OshkV+5nejqrMTnavwOPwraxkBMRUbtz0Shx78gQOKoU2J9ehKNZJThfVIVTeeU4lVcOtUKOXj7O8FHXIkrlDLn82r1yqsdCTkRETTipFTALAuQymVXblctkCPF2QYi3C4oNRpzIKUNKbjkqaupwPKccxwEcyjuHUF8tenq7wNdVA5mVM9gbFnIiImpCo1RALpNhe1IOigzGNrfXXeeE4b28G23zcFZjeE8vDAvR4UJJFU7mlCE1rxzl1XU4nFmMw5nFcNEoEeztjJ7eLgh0d4RczqL+dyzkRER0RUUGI/KtsDCKh5P6io/JZDIEeTgh0N0B4W4mVCq0SCswIF1vQEVNHY5lleJYVikclHL08HZG/64eqDKa4Kjm6XeAhZyIiGyIUi5DqK8LwvxcUWcy43xxFc4WVCCtwICqWhNO5pTjZE45Nh3OwtBgHcaG+2BMmA+66pzEji4aFnIiIrJJSoUcPbyc0cPLGeYwAdmlVTibb0CG3oCSqlrsOV2APacL8ByOI9jbGWPC6ov6wB4e0Cg7T2+dhZyIiGyeXF5/+j3IwwkzXQIxOFiHX07l45eUAhzMKEJagQFpBen4+Pd0OKkVGN7TC6PDvDEsxAvddU52PWCOhZyIiCRFJpOhl68WvXy1uHdkCMqqa7E3tbC+sJ8qQEF5DXaeyMPOE3kAAH83BwwN1mFIiA7DQnQI8rCv0/As5EREJGmuDipMjvbH5Gh/mM0CTuSU4ZeUfPx+phCJ50qQU1qNrxIv4KvECwCAQHdH9O3ijj5d3NC3iweiAl3hpJZuOZRuciIior+Ry2WICnRDVKAbHhzXC1VGE/48V4w/zhYi4awex7JKcaGkChdKqrA1KQcAoJDLEOqrRYS/K0J9XervYfeRzu1uLORERGS3HC9eLx/e0wsAYKipw9GsEhw9X4oj54tx5HwJ8spqcDKnDCdzyho910mtQE8fF3T1dEKgh+PFa/SOCHJ3RKCH42V78SqVqkOO61J2U8jXr1+Pjz/+GAUFBQgPD8ezzz6LmJgYsWMREZGVtWXWOWeNEsNCvDAsxMuyLbukCseySnEqtxyp+eVIzatAWmEFKo0myz3sl+OiUcJbq4G3i6b+b60G0YEeiOjgBV3sopBv27YNK1aswNKlS9GnTx+sXbsW8+fPxw8//ACdTid2PCIisiJrzjrXMOPc0fMl8HJRw8tFh6HBOpjMwsXJcKpRXFmLkspaFFcaLX/X1JlRUVOHipo6pBcaGrU5pIcnAj07rrzaRSH/9NNPMWvWLMyYMQMAsHTpUuzevRtbtmzBvffeK3I6IiJqD9aYda5hxrkrteWtdYC31qHJ9po6EyqNJlTWmGAw1qHSaIIgmDE+wg++rpo2ZWopyRdyo9GI48eP47777rNsk8vlGDZsGBITE5vVhnDxNIjRaGzWOriXYzKZAAC1tbUAAE9HBWRC295eVwc5TCZTh7RlFgC1zgXuLmo0Z2xHR2Zrjob8Wo3CpnK1pK2W/B/Y2vsP1OfXaQSby9XctqT+/gP46/vfSQk52nZ615q5mttec/8PbOP9b7qvu6MKE6MDUFtbC7PZ3KZcDTVFaMZpepnQnL1sWF5eHkaOHImNGzciNjbWsv3VV1/FwYMH8b///e+abRiNRiQlJbVnTCIiohaLjo6GWn3leeoBO+iRW4NSqUR0dDTkcrldz/5DRETSIAgCzGYzlMprl2nJF3IPDw8oFAro9fpG2/V6Pby8vK7wrMbkcvk1f+MhIiKyRXKxA7SVWq1GZGQkEhISLNvMZjMSEhIanWonIiKyR5LvkQPAXXfdhSeeeAJRUVGIiYnB2rVrUVVVhZtvvlnsaERERO3KLgr5lClTUFRUhHfeeQcFBQXo3bs3Pvroo2afWiciIpIqyY9aJyIi6swkf42ciIioM2MhJyIikjAWciIiIgljISciIpIwFnIrWL9+PcaOHYvo6Gj84x//wLFjx8SOdEUHDx7EggULEBcXh7CwMOzatavR44IgYOXKlYiLi0NMTAzmzZuHjIwMccJexpo1azBjxgzExsZi6NCh+Oc//4m0tLRG+9TU1GDp0qUYPHgwYmNj8eCDD6KwsFCkxI198cUXuOGGG9CvXz/069cPt9xyC/bs2WN53JazX84HH3yAsLAwvPjii5Zttn4Mq1atQlhYWKM/kyZNsjxu6/mB+qmpFy1ahMGDByMmJgY33HBDo2mmbflzPHbs2Cbvf1hYGJYuXQrA9t9/k8mEt99+G2PHjkVMTAzGjx+P9957r9Gc6B3+/gvUJlu3bhUiIyOFzZs3C6mpqcIzzzwjDBgwQCgsLBQ72mXt3r1bePPNN4UdO3YIoaGhws6dOxs9vmbNGqF///7Czp07hZMnTwoLFiwQxo4dK1RXV4uUuLG7775b2LJli3D69Gnh5MmTwj333COMHj1aMBgMln2WLFkijBo1Svjjjz+EpKQkYdasWcItt9wiYuq//PTTT8Lu3buF9PR0IS0tTXjzzTeFyMhI4fTp04Ig2Hb2vzt69KgwZswY4YYbbhCWL19u2W7rx/DOO+8IU6dOFfLz8y1/9Hq95XFbz19SUiKMGTNGePLJJ4WjR48K586dE3777TchMzPTso8tf471en2j937v3r1CaGiosG/fPkEQbP/9X716tTBo0CDhl19+Ec6fPy9s375d6Nu3r7B27VrLPh39/rOQt9HMmTOFpUuXWr42mUxCXFycsGbNGhFTNc/fC7nZbBaGDx8ufPTRR5ZtZWVlQlRUlPD999+LEfGa9Hq9EBoaKhw4cEAQhPq8kZGRwvbt2y37nDlzRggNDRUSExNFSnl1AwcOFDZt2iSp7BUVFcKECROEvXv3CnPmzLEUcikcwzvvvCPceOONl31MCvlfe+01Yfbs2Vd8XGqf4+XLlwvjx48XzGazJN7/e++9V3jqqacabXvggQeExx57TBAEcd5/nlpvg4YlVIcNG2bZ1tIlVG1JVlYWCgoKGh2PVqtFnz59bPZ4ysvLAQBubm4AgOTkZNTW1jY6hpCQEAQEBODIkSNiRLwik8mErVu3orKyErGxsZLKvmzZMowaNapRVkA6739mZibi4uIwbtw4PPbYY8jOzgYgjfw///wzoqKi8NBDD2Ho0KGYNm0aNm3aZHlcSp9jo9GI7777DjNmzIBMJpPE+x8bG4t9+/YhPT0dAJCSkoLDhw9j5MiRAMR5/+1iZjexFBcXw2QyQafTNdqu0+maXLeVgoKCAgC47PHY0jWqBmazGS+99BL69euH0NBQAEBhYSFUKhVcXV0b7avT6SzHJ7ZTp07h1ltvRU1NDZycnPDee++hZ8+eOHnypM1nB4CtW7fixIkT2Lx5c5PHpPD+x8TEYMWKFejRowcKCgrw3nvv4fbbb0d8fLwk8p8/fx4bNmzAXXfdhQULFiApKQnLly+HSqXC9OnTJfU53rVrF8rLyzF9+nQA0vj+uffee1FRUYHJkydDoahf//2RRx7BjTfeCECcn6Ms5CRZS5cuRWpqKr744guxo7RIjx498M0336C8vBw//vgjnnjiCXz++edix2qWnJwcvPjii/jkk0+g0WjEjtMqo0aNsvw7PDwcffr0wZgxY7B9+3Y4ODiImKx5BEFAVFQUHn30UQBAREQEUlNTsXHjRktBlIotW7Zg5MiR8PX1FTtKs23fvh3x8fF44403LL+Ar1ixAj4+PqK9/zy13gbWWELVlnh7ewOAJI5n2bJl2L17N9auXQs/Pz/Ldi8vL9TW1qKsrKzR/nq93nJ8YlOr1ejWrRuioqLw2GOPITw8HJ999pkksh8/fhx6vR4333wzIiIiEBERgQMHDmDdunWIiIiQxDH8naurK7p3745z585JIr+3tzdCQkIabQsODrZcHpDK5/jChQv4448/MHPmTMs2Kbz/r776Ku69915MnToVYWFhmDZtGubOnYs1a9YAEOf9ZyFvA3tbQjUoKAje3t6NjqeiogJHjx61meMRBAHLli3Dzp07sXbtWnTp0qXR41FRUVCpVI2OIS0tDdnZ2ejbt28Hp20es9kMo9EoiexDhgxBfHw8vvnmG8ufqKgo3HDDDZZ/2/ox/J3BYMD58+fh7e0tifz9+vWzXJ9tkJGRgcDAQADS+BwDwFdffQWdTofRo0dbtknh/a+uroZMJmu0TaFQWG4/E+P956n1NpLaEqoGgwHnzp2zfJ2VlYWTJ0/Czc0NAQEBuPPOO7F69Wp069YNQUFBWLlyJXx8fDB+/HgRU/9l6dKl+P777/Gf//wHzs7OlutRWq0WDg4O0Gq1mDFjBl5++WW4ubnBxcUFy5cvR2xsrE38IHjjjTcwcuRI+Pv7w2Aw4Pvvv8eBAwfw8ccf23x2AHBxcbGMR2jg5OQEd3d3y3ZbP4ZXXnkFY8aMQUBAAPLz87Fq1SrI5XJcf/31kvg/mDt3LmbPno33338fkydPxrFjx7Bp0yYsW7YMACCTyWz+c2w2m/HVV19h2rRpUCr/KkNSeP/HjBmD999/HwEBAZZT659++ilmzJgBQKT3v13Gwncy69atE0aPHi1ERkYKM2fOFI4cOSJ2pCvat2+fEBoa2uTPE088IQhC/a0Tb7/9tjBs2DAhKipKmDt3rpCWliZy6r9cLntoaKiwZcsWyz7V1dXC888/LwwcOFDo06ePsHDhQiE/P1/E1H956qmnhDFjxgiRkZHCkCFDhLlz5wq///675XFbzn4ll95+Jgi2fwz/+te/hOHDhwuRkZHCiBEjhH/961+N7sG29fyCIAg///yzcP311wtRUVHCpEmThC+//LLR47b+Of7tt9+E0NDQy2ay9fe/vLxcWL58uTB69GghOjpaGDdunPDmm28KNTU1ln06+v3nMqZEREQSxmvkREREEsZCTkREJGEs5ERERBLGQk5ERCRhLOREREQSxkJOREQkYSzkREREEsZCTkREJGEs5ERERBLGQk5EzZKYmIjevXvj3nvvFTsKEV2ChZyImmXz5s2YM2cODh48iLy8PLHjENFFLOREdE0GgwHbtm3D7NmzMXr0aHz99deNHv/pp58wYcIEREdH44477sDXX3+NsLCwRutKHzp0CLfddhtiYmIwatQoLF++HJWVlR19KER2h4WciK5p+/btCA4ORnBwMG688UZs2bLFsv7y+fPn8fDDD2PcuHH49ttvceutt+Ktt95q9Pxz587hnnvuwYQJE/Ddd9/hrbfewuHDh/HCCy+IcThEdoWFnIiuafPmzbjxxhsBACNGjEB5eTkOHDgAAPjyyy/Ro0cPPPHEEwgODsbUqVMxffr0Rs9fs2YNbrjhBsybNw/du3dHv3798PTTT+Obb75BTU1Nhx8PkT1RXnsXIurM0tLSkJSUhPfeew8AoFQqMWXKFGzevBmDBw9Geno6oqKiGj0nJiam0dcpKSk4deoU4uPjLdsEQYDZbEZWVhZCQkLa/0CI7BQLORFd1ebNm1FXV4cRI0ZYtgmCALVajSVLljSrjcrKStx666244447mjzm7+9vtaxEnRELORFdUV1dHb799ls8+eSTGD58eKPHFi5ciO+//x49evTAnj17Gj2WlJTU6OuIiAicOXMG3bp1a/fMRJ0Nr5ET0RXt3r0bpaWlmDlzJkJDQxv9mTBhAjZv3oxbbrkF6enpeO2115Ceno5t27ZZRrXLZDIAwD333IPExEQsW7YMJ0+eREZGBnbt2oVly5aJeXhEdoGFnIiuaPPmzRg2bBi0Wm2TxyZOnIjk5GQYDAasXLkSO3fuxI033ogNGzZgwYIFAAC1Wg0ACA8Px7p165CRkYHbbrsN06dPxzvvvAMfH58OPR4ieyQTGu4hISKyktWrV2Pjxo1NTrkTkfXxGjkRtdn69esRHR0NDw8PHD58GB9//DFuv/12sWMRdQos5ETUZpmZmVi9ejVKS0sREBCAu+66C/fdd5/YsYg6BZ5aJyIikjAOdiMiIpIwFnIiIiIJYyEnIiKSMBZyIiIiCWMhJyIikjAWciIiIgljISciIpIwFnIiIiIJ+39VerH2rhgpIwAAAABJRU5ErkJggg=="},"metadata":{}}]},{"cell_type":"code","source":"Q1= data['Fare'].quantile(0.25)\nQ3=data['Fare'].quantile(0.75)\n\nIQR=Q3-Q1\n\nupper=Q3 + 1.5*IQR\nLower=Q1 - 1.5*IQR\n\nprint(upper)\nprint(Lower)","metadata":{"execution":{"iopub.status.busy":"2024-09-09T17:56:45.640153Z","iopub.execute_input":"2024-09-09T17:56:45.641183Z","iopub.status.idle":"2024-09-09T17:56:45.650886Z","shell.execute_reply.started":"2024-09-09T17:56:45.641136Z","shell.execute_reply":"2024-09-09T17:56:45.649638Z"},"trusted":true},"execution_count":80,"outputs":[{"name":"stdout","text":"65.6344\n-26.724\n","output_type":"stream"}]},{"cell_type":"code","source":"df=data[data[\"Fare\"]>65]\ndf","metadata":{"execution":{"iopub.status.busy":"2024-09-09T17:59:19.846758Z","iopub.execute_input":"2024-09-09T17:59:19.847160Z","iopub.status.idle":"2024-09-09T17:59:19.868631Z","shell.execute_reply.started":"2024-09-09T17:59:19.847125Z","shell.execute_reply":"2024-09-09T17:59:19.867482Z"},"trusted":true},"execution_count":84,"outputs":[{"execution_count":84,"output_type":"execute_result","data":{"text/plain":"     PassengerId  Survived  Pclass  \\\n1              2         1       1   \n27            28         0       1   \n31            32         1       1   \n34            35         0       1   \n52            53         1       1   \n..           ...       ...     ...   \n846          847         0       3   \n849          850         1       1   \n856          857         1       1   \n863          864         0       3   \n879          880         1       1   \n\n                                                  Name     Sex   Age  SibSp  \\\n1    Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n27                      Fortune, Mr. Charles Alexander    male  19.0      3   \n31      Spencer, Mrs. William Augustus (Marie Eugenie)  female   NaN      1   \n34                             Meyer, Mr. Edgar Joseph    male  28.0      1   \n52            Harper, Mrs. Henry Sleeper (Myna Haxtun)  female  49.0      1   \n..                                                 ...     ...   ...    ...   \n846                           Sage, Mr. Douglas Bullen    male   NaN      8   \n849       Goldenberg, Mrs. Samuel L (Edwiga Grabowska)  female   NaN      1   \n856         Wick, Mrs. George Dennick (Mary Hitchcock)  female  45.0      1   \n863                  Sage, Miss. Dorothy Edith \"Dolly\"  female   NaN      8   \n879      Potter, Mrs. Thomas Jr (Lily Alexenia Wilson)  female  56.0      0   \n\n     Parch    Ticket      Fare        Cabin Embarked  \n1        0  PC 17599   71.2833          C85        C  \n27       2     19950  263.0000  C23 C25 C27        S  \n31       0  PC 17569  146.5208          B78        C  \n34       0  PC 17604   82.1708          NaN        C  \n52       0  PC 17572   76.7292          D33        C  \n..     ...       ...       ...          ...      ...  \n846      2  CA. 2343   69.5500          NaN        S  \n849      0     17453   89.1042          C92        C  \n856      1     36928  164.8667          NaN        S  \n863      2  CA. 2343   69.5500          NaN        S  \n879      1     11767   83.1583          C50        C  \n\n[116 rows x 12 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n      <td>female</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>PC 17599</td>\n      <td>71.2833</td>\n      <td>C85</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>27</th>\n      <td>28</td>\n      <td>0</td>\n      <td>1</td>\n      <td>Fortune, Mr. Charles Alexander</td>\n      <td>male</td>\n      <td>19.0</td>\n      <td>3</td>\n      <td>2</td>\n      <td>19950</td>\n      <td>263.0000</td>\n      <td>C23 C25 C27</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>31</th>\n      <td>32</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Spencer, Mrs. William Augustus (Marie Eugenie)</td>\n      <td>female</td>\n      <td>NaN</td>\n      <td>1</td>\n      <td>0</td>\n      <td>PC 17569</td>\n      <td>146.5208</td>\n      <td>B78</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>34</th>\n      <td>35</td>\n      <td>0</td>\n      <td>1</td>\n      <td>Meyer, Mr. Edgar Joseph</td>\n      <td>male</td>\n      <td>28.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>PC 17604</td>\n      <td>82.1708</td>\n      <td>NaN</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>52</th>\n      <td>53</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Harper, Mrs. Henry Sleeper (Myna Haxtun)</td>\n      <td>female</td>\n      <td>49.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>PC 17572</td>\n      <td>76.7292</td>\n      <td>D33</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>846</th>\n      <td>847</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Sage, Mr. Douglas Bullen</td>\n      <td>male</td>\n      <td>NaN</td>\n      <td>8</td>\n      <td>2</td>\n      <td>CA. 2343</td>\n      <td>69.5500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>849</th>\n      <td>850</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Goldenberg, Mrs. Samuel L (Edwiga Grabowska)</td>\n      <td>female</td>\n      <td>NaN</td>\n      <td>1</td>\n      <td>0</td>\n      <td>17453</td>\n      <td>89.1042</td>\n      <td>C92</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>856</th>\n      <td>857</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Wick, Mrs. George Dennick (Mary Hitchcock)</td>\n      <td>female</td>\n      <td>45.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>36928</td>\n      <td>164.8667</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>863</th>\n      <td>864</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Sage, Miss. Dorothy Edith \"Dolly\"</td>\n      <td>female</td>\n      <td>NaN</td>\n      <td>8</td>\n      <td>2</td>\n      <td>CA. 2343</td>\n      <td>69.5500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>879</th>\n      <td>880</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Potter, Mrs. Thomas Jr (Lily Alexenia Wilson)</td>\n      <td>female</td>\n      <td>56.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>11767</td>\n      <td>83.1583</td>\n      <td>C50</td>\n      <td>C</td>\n    </tr>\n  </tbody>\n</table>\n<p>116 rows Ã— 12 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"print(data.info())","metadata":{"execution":{"iopub.status.busy":"2024-09-09T18:00:57.734170Z","iopub.execute_input":"2024-09-09T18:00:57.734591Z","iopub.status.idle":"2024-09-09T18:00:57.747159Z","shell.execute_reply.started":"2024-09-09T18:00:57.734552Z","shell.execute_reply":"2024-09-09T18:00:57.745941Z"},"trusted":true},"execution_count":90,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 891 entries, 0 to 890\nData columns (total 11 columns):\n #   Column       Non-Null Count  Dtype  \n---  ------       --------------  -----  \n 0   PassengerId  891 non-null    int64  \n 1   Survived     891 non-null    int64  \n 2   Pclass       891 non-null    int64  \n 3   Name         891 non-null    object \n 4   Sex          891 non-null    object \n 5   Age          891 non-null    float64\n 6   SibSp        891 non-null    int64  \n 7   Parch        891 non-null    int64  \n 8   Ticket       891 non-null    object \n 9   Fare         891 non-null    float64\n 10  Embarked     889 non-null    object \ndtypes: float64(2), int64(5), object(4)\nmemory usage: 76.7+ KB\nNone\n","output_type":"stream"}]},{"cell_type":"code","source":"data['Age'] = data['Age'].fillna(data['Age'].mean())\nprint(data['Age'] )\ndata.drop('Cabin', axis=1,inplace=True)\n\n","metadata":{"execution":{"iopub.status.busy":"2024-09-09T18:01:49.071467Z","iopub.execute_input":"2024-09-09T18:01:49.071968Z","iopub.status.idle":"2024-09-09T18:01:49.084739Z","shell.execute_reply.started":"2024-09-09T18:01:49.071927Z","shell.execute_reply":"2024-09-09T18:01:49.083330Z"},"trusted":true},"execution_count":95,"outputs":[{"name":"stdout","text":"0      22.000000\n1      38.000000\n2      26.000000\n3      35.000000\n4      35.000000\n         ...    \n886    27.000000\n887    19.000000\n888    29.699118\n889    26.000000\n890    32.000000\nName: Age, Length: 891, dtype: float64\n","output_type":"stream"}]},{"cell_type":"code","source":"data_null = round(data.isna().sum() / data.shape[0] * 100, 2)\ndata_null.to_frame(name = 'percent NULL data (%)')","metadata":{"execution":{"iopub.status.busy":"2024-09-09T18:01:16.370569Z","iopub.execute_input":"2024-09-09T18:01:16.372517Z","iopub.status.idle":"2024-09-09T18:01:16.401416Z","shell.execute_reply.started":"2024-09-09T18:01:16.372410Z","shell.execute_reply":"2024-09-09T18:01:16.400028Z"},"trusted":true},"execution_count":92,"outputs":[{"execution_count":92,"output_type":"execute_result","data":{"text/plain":"             percent NULL data (%)\nPassengerId                   0.00\nSurvived                      0.00\nPclass                        0.00\nName                          0.00\nSex                           0.00\nAge                           0.00\nSibSp                         0.00\nParch                         0.00\nTicket                        0.00\nFare                          0.00\nEmbarked                      0.22","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>percent NULL data (%)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>PassengerId</th>\n      <td>0.00</td>\n    </tr>\n    <tr>\n      <th>Survived</th>\n      <td>0.00</td>\n    </tr>\n    <tr>\n      <th>Pclass</th>\n      <td>0.00</td>\n    </tr>\n    <tr>\n      <th>Name</th>\n      <td>0.00</td>\n    </tr>\n    <tr>\n      <th>Sex</th>\n      <td>0.00</td>\n    </tr>\n    <tr>\n      <th>Age</th>\n      <td>0.00</td>\n    </tr>\n    <tr>\n      <th>SibSp</th>\n      <td>0.00</td>\n    </tr>\n    <tr>\n      <th>Parch</th>\n      <td>0.00</td>\n    </tr>\n    <tr>\n      <th>Ticket</th>\n      <td>0.00</td>\n    </tr>\n    <tr>\n      <th>Fare</th>\n      <td>0.00</td>\n    </tr>\n    <tr>\n      <th>Embarked</th>\n      <td>0.22</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"data.head()","metadata":{"execution":{"iopub.status.busy":"2024-09-09T18:01:25.142784Z","iopub.execute_input":"2024-09-09T18:01:25.143216Z","iopub.status.idle":"2024-09-09T18:01:25.161822Z","shell.execute_reply.started":"2024-09-09T18:01:25.143176Z","shell.execute_reply":"2024-09-09T18:01:25.160554Z"},"trusted":true},"execution_count":93,"outputs":[{"execution_count":93,"output_type":"execute_result","data":{"text/plain":"   PassengerId  Survived  Pclass  \\\n0            1         0       3   \n1            2         1       1   \n2            3         1       3   \n3            4         1       1   \n4            5         0       3   \n\n                                                Name     Sex        Age  \\\n0                            Braund, Mr. Owen Harris    male  34.266535   \n1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.000000   \n2                             Heikkinen, Miss. Laina  female  34.266535   \n3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  34.266535   \n4                           Allen, Mr. William Henry    male  34.266535   \n\n   SibSp  Parch            Ticket     Fare Embarked  \n0      1      0         A/5 21171   7.2500        S  \n1      1      0          PC 17599  71.2833        C  \n2      0      0  STON/O2. 3101282   7.9250        S  \n3      1      0            113803  53.1000        S  \n4      0      0            373450   8.0500        S  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Braund, Mr. Owen Harris</td>\n      <td>male</td>\n      <td>34.266535</td>\n      <td>1</td>\n      <td>0</td>\n      <td>A/5 21171</td>\n      <td>7.2500</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n      <td>female</td>\n      <td>38.000000</td>\n      <td>1</td>\n      <td>0</td>\n      <td>PC 17599</td>\n      <td>71.2833</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n      <td>Heikkinen, Miss. Laina</td>\n      <td>female</td>\n      <td>34.266535</td>\n      <td>0</td>\n      <td>0</td>\n      <td>STON/O2. 3101282</td>\n      <td>7.9250</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n      <td>female</td>\n      <td>34.266535</td>\n      <td>1</td>\n      <td>0</td>\n      <td>113803</td>\n      <td>53.1000</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Allen, Mr. William Henry</td>\n      <td>male</td>\n      <td>34.266535</td>\n      <td>0</td>\n      <td>0</td>\n      <td>373450</td>\n      <td>8.0500</td>\n      <td>S</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"data.corr(numeric_only=True)","metadata":{"execution":{"iopub.status.busy":"2024-09-09T17:09:00.154957Z","iopub.execute_input":"2024-09-09T17:09:00.155420Z","iopub.status.idle":"2024-09-09T17:09:00.180478Z","shell.execute_reply.started":"2024-09-09T17:09:00.155375Z","shell.execute_reply":"2024-09-09T17:09:00.179287Z"},"trusted":true},"execution_count":7,"outputs":[{"execution_count":7,"output_type":"execute_result","data":{"text/plain":"             PassengerId  Survived    Pclass       Age     SibSp     Parch  \\\nPassengerId     1.000000 -0.005007 -0.035144  0.033207 -0.057527 -0.001652   \nSurvived       -0.005007  1.000000 -0.338481 -0.069809 -0.035322  0.081629   \nPclass         -0.035144 -0.338481  1.000000 -0.331339  0.083081  0.018443   \nAge             0.033207 -0.069809 -0.331339  1.000000 -0.232625 -0.179191   \nSibSp          -0.057527 -0.035322  0.083081 -0.232625  1.000000  0.414838   \nParch          -0.001652  0.081629  0.018443 -0.179191  0.414838  1.000000   \nFare            0.012658  0.257307 -0.549500  0.091566  0.159651  0.216225   \n\n                 Fare  \nPassengerId  0.012658  \nSurvived     0.257307  \nPclass      -0.549500  \nAge          0.091566  \nSibSp        0.159651  \nParch        0.216225  \nFare         1.000000  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>PassengerId</th>\n      <td>1.000000</td>\n      <td>-0.005007</td>\n      <td>-0.035144</td>\n      <td>0.033207</td>\n      <td>-0.057527</td>\n      <td>-0.001652</td>\n      <td>0.012658</td>\n    </tr>\n    <tr>\n      <th>Survived</th>\n      <td>-0.005007</td>\n      <td>1.000000</td>\n      <td>-0.338481</td>\n      <td>-0.069809</td>\n      <td>-0.035322</td>\n      <td>0.081629</td>\n      <td>0.257307</td>\n    </tr>\n    <tr>\n      <th>Pclass</th>\n      <td>-0.035144</td>\n      <td>-0.338481</td>\n      <td>1.000000</td>\n      <td>-0.331339</td>\n      <td>0.083081</td>\n      <td>0.018443</td>\n      <td>-0.549500</td>\n    </tr>\n    <tr>\n      <th>Age</th>\n      <td>0.033207</td>\n      <td>-0.069809</td>\n      <td>-0.331339</td>\n      <td>1.000000</td>\n      <td>-0.232625</td>\n      <td>-0.179191</td>\n      <td>0.091566</td>\n    </tr>\n    <tr>\n      <th>SibSp</th>\n      <td>-0.057527</td>\n      <td>-0.035322</td>\n      <td>0.083081</td>\n      <td>-0.232625</td>\n      <td>1.000000</td>\n      <td>0.414838</td>\n      <td>0.159651</td>\n    </tr>\n    <tr>\n      <th>Parch</th>\n      <td>-0.001652</td>\n      <td>0.081629</td>\n      <td>0.018443</td>\n      <td>-0.179191</td>\n      <td>0.414838</td>\n      <td>1.000000</td>\n      <td>0.216225</td>\n    </tr>\n    <tr>\n      <th>Fare</th>\n      <td>0.012658</td>\n      <td>0.257307</td>\n      <td>-0.549500</td>\n      <td>0.091566</td>\n      <td>0.159651</td>\n      <td>0.216225</td>\n      <td>1.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"data.drop(['PassengerId','Ticket','Name','Age'],axis=1,inplace=True)\ndata.head()","metadata":{"execution":{"iopub.status.busy":"2024-09-09T17:09:00.182149Z","iopub.execute_input":"2024-09-09T17:09:00.182626Z","iopub.status.idle":"2024-09-09T17:09:00.200747Z","shell.execute_reply.started":"2024-09-09T17:09:00.182576Z","shell.execute_reply":"2024-09-09T17:09:00.199573Z"},"trusted":true},"execution_count":8,"outputs":[{"execution_count":8,"output_type":"execute_result","data":{"text/plain":"   Survived  Pclass     Sex  SibSp  Parch     Fare Embarked\n0         0       3    male      1      0   7.2500        S\n1         1       1  female      1      0  71.2833        C\n2         1       3  female      0      0   7.9250        S\n3         1       1  female      1      0  53.1000        S\n4         0       3    male      0      0   8.0500        S","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>1</td>\n      <td>0</td>\n      <td>7.2500</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>1</td>\n      <td>female</td>\n      <td>1</td>\n      <td>0</td>\n      <td>71.2833</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>3</td>\n      <td>female</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.9250</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>1</td>\n      <td>female</td>\n      <td>1</td>\n      <td>0</td>\n      <td>53.1000</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8.0500</td>\n      <td>S</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"encoder= LabelEncoder()\ndata['Sex']=encoder.fit_transform(data['Sex'])\ndata['Embarked']=encoder.fit_transform(data['Embarked'])\ndata['Survived']=encoder.fit_transform(data['Survived'])","metadata":{"execution":{"iopub.status.busy":"2024-09-09T17:09:00.202161Z","iopub.execute_input":"2024-09-09T17:09:00.202608Z","iopub.status.idle":"2024-09-09T17:09:00.216783Z","shell.execute_reply.started":"2024-09-09T17:09:00.202562Z","shell.execute_reply":"2024-09-09T17:09:00.215405Z"},"trusted":true},"execution_count":9,"outputs":[]},{"cell_type":"code","source":"X = data.drop('Survived', axis=1)\ny = data['Survived']","metadata":{"execution":{"iopub.status.busy":"2024-09-09T17:09:00.223582Z","iopub.execute_input":"2024-09-09T17:09:00.225043Z","iopub.status.idle":"2024-09-09T17:09:00.232314Z","shell.execute_reply.started":"2024-09-09T17:09:00.224987Z","shell.execute_reply":"2024-09-09T17:09:00.231106Z"},"trusted":true},"execution_count":10,"outputs":[]},{"cell_type":"code","source":"X","metadata":{"execution":{"iopub.status.busy":"2024-09-09T17:09:00.233774Z","iopub.execute_input":"2024-09-09T17:09:00.234214Z","iopub.status.idle":"2024-09-09T17:09:00.258029Z","shell.execute_reply.started":"2024-09-09T17:09:00.234167Z","shell.execute_reply":"2024-09-09T17:09:00.256820Z"},"trusted":true},"execution_count":11,"outputs":[{"execution_count":11,"output_type":"execute_result","data":{"text/plain":"     Pclass  Sex  SibSp  Parch     Fare  Embarked\n0         3    1      1      0   7.2500         2\n1         1    0      1      0  71.2833         0\n2         3    0      0      0   7.9250         2\n3         1    0      1      0  53.1000         2\n4         3    1      0      0   8.0500         2\n..      ...  ...    ...    ...      ...       ...\n886       2    1      0      0  13.0000         2\n887       1    0      0      0  30.0000         2\n888       3    0      1      2  23.4500         2\n889       1    1      0      0  30.0000         0\n890       3    1      0      0   7.7500         1\n\n[891 rows x 6 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>3</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>7.2500</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>71.2833</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.9250</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>53.1000</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>3</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8.0500</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>886</th>\n      <td>2</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>13.0000</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>887</th>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>30.0000</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>888</th>\n      <td>3</td>\n      <td>0</td>\n      <td>1</td>\n      <td>2</td>\n      <td>23.4500</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>889</th>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>30.0000</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>890</th>\n      <td>3</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.7500</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n<p>891 rows Ã— 6 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"y","metadata":{"execution":{"iopub.status.busy":"2024-09-09T17:09:00.259605Z","iopub.execute_input":"2024-09-09T17:09:00.260050Z","iopub.status.idle":"2024-09-09T17:09:00.275427Z","shell.execute_reply.started":"2024-09-09T17:09:00.259999Z","shell.execute_reply":"2024-09-09T17:09:00.274316Z"},"trusted":true},"execution_count":12,"outputs":[{"execution_count":12,"output_type":"execute_result","data":{"text/plain":"0      0\n1      1\n2      1\n3      1\n4      0\n      ..\n886    0\n887    1\n888    0\n889    1\n890    0\nName: Survived, Length: 891, dtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) ","metadata":{"execution":{"iopub.status.busy":"2024-09-09T17:09:00.276777Z","iopub.execute_input":"2024-09-09T17:09:00.277184Z","iopub.status.idle":"2024-09-09T17:09:00.290522Z","shell.execute_reply.started":"2024-09-09T17:09:00.277139Z","shell.execute_reply":"2024-09-09T17:09:00.289388Z"},"trusted":true},"execution_count":13,"outputs":[]},{"cell_type":"markdown","source":"# **LogisticRegression**","metadata":{}},{"cell_type":"code","source":"model = LogisticRegression()\nmodel.fit(X_train, y_train)","metadata":{"execution":{"iopub.status.busy":"2024-09-09T17:09:00.291708Z","iopub.execute_input":"2024-09-09T17:09:00.292488Z","iopub.status.idle":"2024-09-09T17:09:00.339949Z","shell.execute_reply.started":"2024-09-09T17:09:00.292435Z","shell.execute_reply":"2024-09-09T17:09:00.338767Z"},"trusted":true},"execution_count":14,"outputs":[{"execution_count":14,"output_type":"execute_result","data":{"text/plain":"LogisticRegression()","text/html":"<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression()</pre></div></div></div></div></div>"},"metadata":{}}]},{"cell_type":"code","source":"y_pred = model.predict(X_test)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-09T17:09:00.341769Z","iopub.execute_input":"2024-09-09T17:09:00.342205Z","iopub.status.idle":"2024-09-09T17:09:00.349764Z","shell.execute_reply.started":"2024-09-09T17:09:00.342158Z","shell.execute_reply":"2024-09-09T17:09:00.348313Z"},"trusted":true},"execution_count":15,"outputs":[]},{"cell_type":"code","source":"train_score=round(model.score(X_train,y_train)*100)\nprint(train_score)","metadata":{"execution":{"iopub.status.busy":"2024-09-09T17:09:00.351480Z","iopub.execute_input":"2024-09-09T17:09:00.352669Z","iopub.status.idle":"2024-09-09T17:09:00.364659Z","shell.execute_reply.started":"2024-09-09T17:09:00.352615Z","shell.execute_reply":"2024-09-09T17:09:00.363387Z"},"trusted":true},"execution_count":16,"outputs":[{"name":"stdout","text":"80\n","output_type":"stream"}]},{"cell_type":"code","source":"test_score=round(model.score(X_test,y_test)*100)\nprint(test_score)","metadata":{"execution":{"iopub.status.busy":"2024-09-09T17:09:00.365932Z","iopub.execute_input":"2024-09-09T17:09:00.366317Z","iopub.status.idle":"2024-09-09T17:09:00.379428Z","shell.execute_reply.started":"2024-09-09T17:09:00.366263Z","shell.execute_reply":"2024-09-09T17:09:00.378150Z"},"trusted":true},"execution_count":17,"outputs":[{"name":"stdout","text":"76\n","output_type":"stream"}]},{"cell_type":"code","source":"accuracy = accuracy_score(y_test, y_pred)\nreport = classification_report(y_test, y_pred)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-09T17:09:00.381039Z","iopub.execute_input":"2024-09-09T17:09:00.381498Z","iopub.status.idle":"2024-09-09T17:09:00.399533Z","shell.execute_reply.started":"2024-09-09T17:09:00.381450Z","shell.execute_reply":"2024-09-09T17:09:00.398302Z"},"trusted":true},"execution_count":18,"outputs":[]},{"cell_type":"code","source":"print(\"Accuracy:\", accuracy)\nprint(\"Classification Report:\\n\", report)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-09T17:09:00.401283Z","iopub.execute_input":"2024-09-09T17:09:00.401718Z","iopub.status.idle":"2024-09-09T17:09:00.411755Z","shell.execute_reply.started":"2024-09-09T17:09:00.401666Z","shell.execute_reply":"2024-09-09T17:09:00.410421Z"},"trusted":true},"execution_count":19,"outputs":[{"name":"stdout","text":"Accuracy: 0.7597765363128491\nClassification Report:\n               precision    recall  f1-score   support\n\n           0       0.79      0.80      0.80       105\n           1       0.71      0.70      0.71        74\n\n    accuracy                           0.76       179\n   macro avg       0.75      0.75      0.75       179\nweighted avg       0.76      0.76      0.76       179\n\n","output_type":"stream"}]},{"cell_type":"code","source":"rate = accuracy* 100\nprint(\"{:.0f}%\".format(rate))","metadata":{"execution":{"iopub.status.busy":"2024-09-09T17:09:00.413417Z","iopub.execute_input":"2024-09-09T17:09:00.413873Z","iopub.status.idle":"2024-09-09T17:09:00.423285Z","shell.execute_reply.started":"2024-09-09T17:09:00.413826Z","shell.execute_reply":"2024-09-09T17:09:00.421856Z"},"trusted":true},"execution_count":20,"outputs":[{"name":"stdout","text":"76%\n","output_type":"stream"}]},{"cell_type":"code","source":"from sklearn.metrics import confusion_matrix\n\nprint(confusion_matrix(y_test,y_pred))","metadata":{"execution":{"iopub.status.busy":"2024-09-09T17:09:00.424933Z","iopub.execute_input":"2024-09-09T17:09:00.425384Z","iopub.status.idle":"2024-09-09T17:09:00.437110Z","shell.execute_reply.started":"2024-09-09T17:09:00.425337Z","shell.execute_reply":"2024-09-09T17:09:00.435950Z"},"trusted":true},"execution_count":21,"outputs":[{"name":"stdout","text":"[[84 21]\n [22 52]]\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# **RandomForestClassifier**","metadata":{}},{"cell_type":"code","source":"rf_model = RandomForestClassifier(random_state=42)\nrf_model.fit(X_train, y_train)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-09T17:09:00.438835Z","iopub.execute_input":"2024-09-09T17:09:00.439212Z","iopub.status.idle":"2024-09-09T17:09:00.661378Z","shell.execute_reply.started":"2024-09-09T17:09:00.439174Z","shell.execute_reply":"2024-09-09T17:09:00.660329Z"},"trusted":true},"execution_count":22,"outputs":[{"execution_count":22,"output_type":"execute_result","data":{"text/plain":"RandomForestClassifier(random_state=42)","text/html":"<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier(random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier(random_state=42)</pre></div></div></div></div></div>"},"metadata":{}}]},{"cell_type":"code","source":"y_pred_rf = rf_model.predict(X_test)\naccuracy_rf = accuracy_score(y_test, y_pred_rf)\nreport_rf = classification_report(y_test, y_pred_rf)","metadata":{"execution":{"iopub.status.busy":"2024-09-09T17:09:00.662638Z","iopub.execute_input":"2024-09-09T17:09:00.662970Z","iopub.status.idle":"2024-09-09T17:09:00.687016Z","shell.execute_reply.started":"2024-09-09T17:09:00.662937Z","shell.execute_reply":"2024-09-09T17:09:00.685749Z"},"trusted":true},"execution_count":23,"outputs":[]},{"cell_type":"code","source":"train_score=round(rf_model.score(X_train,y_train)*100)\nprint(train_score)","metadata":{"execution":{"iopub.status.busy":"2024-09-09T17:09:00.688700Z","iopub.execute_input":"2024-09-09T17:09:00.689550Z","iopub.status.idle":"2024-09-09T17:09:00.713371Z","shell.execute_reply.started":"2024-09-09T17:09:00.689509Z","shell.execute_reply":"2024-09-09T17:09:00.712307Z"},"trusted":true},"execution_count":24,"outputs":[{"name":"stdout","text":"93\n","output_type":"stream"}]},{"cell_type":"code","source":"test_score=round(rf_model.score(X_test,y_test)*100)\nprint(test_score)","metadata":{"execution":{"iopub.status.busy":"2024-09-09T17:09:00.714639Z","iopub.execute_input":"2024-09-09T17:09:00.714977Z","iopub.status.idle":"2024-09-09T17:09:00.734322Z","shell.execute_reply.started":"2024-09-09T17:09:00.714943Z","shell.execute_reply":"2024-09-09T17:09:00.732966Z"},"trusted":true},"execution_count":25,"outputs":[{"name":"stdout","text":"80\n","output_type":"stream"}]},{"cell_type":"code","source":"rate = accuracy_rf * 100\nprint(\"{:.0f}%\".format(rate))","metadata":{"execution":{"iopub.status.busy":"2024-09-09T17:09:00.735713Z","iopub.execute_input":"2024-09-09T17:09:00.736434Z","iopub.status.idle":"2024-09-09T17:09:00.741626Z","shell.execute_reply.started":"2024-09-09T17:09:00.736395Z","shell.execute_reply":"2024-09-09T17:09:00.740661Z"},"trusted":true},"execution_count":26,"outputs":[{"name":"stdout","text":"80%\n","output_type":"stream"}]},{"cell_type":"code","source":"print(\"Random Forest Accuracy:\", accuracy_rf)\nprint(\"Random Forest Classification Report:\\n\", report_rf) \n","metadata":{"execution":{"iopub.status.busy":"2024-09-09T17:09:00.742959Z","iopub.execute_input":"2024-09-09T17:09:00.743335Z","iopub.status.idle":"2024-09-09T17:09:00.752658Z","shell.execute_reply.started":"2024-09-09T17:09:00.743293Z","shell.execute_reply":"2024-09-09T17:09:00.751622Z"},"trusted":true},"execution_count":27,"outputs":[{"name":"stdout","text":"Random Forest Accuracy: 0.8044692737430168\nRandom Forest Classification Report:\n               precision    recall  f1-score   support\n\n           0       0.83      0.84      0.83       105\n           1       0.77      0.76      0.76        74\n\n    accuracy                           0.80       179\n   macro avg       0.80      0.80      0.80       179\nweighted avg       0.80      0.80      0.80       179\n\n","output_type":"stream"}]},{"cell_type":"code","source":"print(confusion_matrix(y_test,y_pred_rf))","metadata":{"execution":{"iopub.status.busy":"2024-09-09T17:09:00.758018Z","iopub.execute_input":"2024-09-09T17:09:00.758423Z","iopub.status.idle":"2024-09-09T17:09:00.765807Z","shell.execute_reply.started":"2024-09-09T17:09:00.758385Z","shell.execute_reply":"2024-09-09T17:09:00.764742Z"},"trusted":true},"execution_count":28,"outputs":[{"name":"stdout","text":"[[88 17]\n [18 56]]\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# **GradientBoostingClassifier**","metadata":{}},{"cell_type":"code","source":"gb_model=GradientBoostingClassifier(random_state=42)\ngb_model.fit(X_train, y_train)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-09T17:09:00.767306Z","iopub.execute_input":"2024-09-09T17:09:00.767681Z","iopub.status.idle":"2024-09-09T17:09:00.905761Z","shell.execute_reply.started":"2024-09-09T17:09:00.767644Z","shell.execute_reply":"2024-09-09T17:09:00.904590Z"},"trusted":true},"execution_count":29,"outputs":[{"execution_count":29,"output_type":"execute_result","data":{"text/plain":"GradientBoostingClassifier(random_state=42)","text/html":"<style>#sk-container-id-3 {color: black;background-color: white;}#sk-container-id-3 pre{padding: 0;}#sk-container-id-3 div.sk-toggleable {background-color: white;}#sk-container-id-3 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-3 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-3 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-3 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-3 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-3 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-3 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-3 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-3 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-3 div.sk-item {position: relative;z-index: 1;}#sk-container-id-3 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-3 div.sk-item::before, #sk-container-id-3 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-3 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-3 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-3 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-3 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-3 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-3 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-3 div.sk-label-container {text-align: center;}#sk-container-id-3 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-3 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GradientBoostingClassifier(random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" checked><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GradientBoostingClassifier</label><div class=\"sk-toggleable__content\"><pre>GradientBoostingClassifier(random_state=42)</pre></div></div></div></div></div>"},"metadata":{}}]},{"cell_type":"code","source":"y_pred_gb = gb_model.predict(X_test)\naccuracy_gb = accuracy_score(y_test, y_pred_gb)\nreport_gb = classification_report(y_test, y_pred_gb)","metadata":{"execution":{"iopub.status.busy":"2024-09-09T17:09:00.907172Z","iopub.execute_input":"2024-09-09T17:09:00.907914Z","iopub.status.idle":"2024-09-09T17:09:00.934181Z","shell.execute_reply.started":"2024-09-09T17:09:00.907863Z","shell.execute_reply":"2024-09-09T17:09:00.933010Z"},"trusted":true},"execution_count":30,"outputs":[]},{"cell_type":"code","source":"train_score=round(gb_model.score(X_train,y_train)*100)\nprint(train_score)","metadata":{"execution":{"iopub.status.busy":"2024-09-09T17:09:00.935564Z","iopub.execute_input":"2024-09-09T17:09:00.936207Z","iopub.status.idle":"2024-09-09T17:09:00.949434Z","shell.execute_reply.started":"2024-09-09T17:09:00.936161Z","shell.execute_reply":"2024-09-09T17:09:00.948028Z"},"trusted":true},"execution_count":31,"outputs":[{"name":"stdout","text":"87\n","output_type":"stream"}]},{"cell_type":"code","source":"test_score=round(gb_model.score(X_test,y_test)*100)\nprint(test_score)","metadata":{"execution":{"iopub.status.busy":"2024-09-09T17:09:00.951147Z","iopub.execute_input":"2024-09-09T17:09:00.951927Z","iopub.status.idle":"2024-09-09T17:09:00.963773Z","shell.execute_reply.started":"2024-09-09T17:09:00.951877Z","shell.execute_reply":"2024-09-09T17:09:00.962666Z"},"trusted":true},"execution_count":32,"outputs":[{"name":"stdout","text":"80\n","output_type":"stream"}]},{"cell_type":"code","source":"rate = accuracy_gb * 100\nprint(\"{:.0f}%\".format(rate))","metadata":{"execution":{"iopub.status.busy":"2024-09-09T17:09:00.965270Z","iopub.execute_input":"2024-09-09T17:09:00.966678Z","iopub.status.idle":"2024-09-09T17:09:00.973471Z","shell.execute_reply.started":"2024-09-09T17:09:00.966627Z","shell.execute_reply":"2024-09-09T17:09:00.972259Z"},"trusted":true},"execution_count":33,"outputs":[{"name":"stdout","text":"80%\n","output_type":"stream"}]},{"cell_type":"code","source":"print(\"Gradient Boosting Classifier Accuracy:\", accuracy_rf)\nprint(\"Gradient Boosting Classifier Report:\\n\", report_rf) ","metadata":{"execution":{"iopub.status.busy":"2024-09-09T17:09:00.975086Z","iopub.execute_input":"2024-09-09T17:09:00.976130Z","iopub.status.idle":"2024-09-09T17:09:00.985270Z","shell.execute_reply.started":"2024-09-09T17:09:00.976077Z","shell.execute_reply":"2024-09-09T17:09:00.984007Z"},"trusted":true},"execution_count":34,"outputs":[{"name":"stdout","text":"Gradient Boosting Classifier Accuracy: 0.8044692737430168\nGradient Boosting Classifier Report:\n               precision    recall  f1-score   support\n\n           0       0.83      0.84      0.83       105\n           1       0.77      0.76      0.76        74\n\n    accuracy                           0.80       179\n   macro avg       0.80      0.80      0.80       179\nweighted avg       0.80      0.80      0.80       179\n\n","output_type":"stream"}]},{"cell_type":"code","source":"print(confusion_matrix(y_test,y_pred_gb))","metadata":{"execution":{"iopub.status.busy":"2024-09-09T17:09:00.986739Z","iopub.execute_input":"2024-09-09T17:09:00.987595Z","iopub.status.idle":"2024-09-09T17:09:00.996901Z","shell.execute_reply.started":"2024-09-09T17:09:00.987543Z","shell.execute_reply":"2024-09-09T17:09:00.995775Z"},"trusted":true},"execution_count":35,"outputs":[{"name":"stdout","text":"[[91 14]\n [22 52]]\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# **XGBoost**","metadata":{}},{"cell_type":"code","source":"xgb_model = xgb.XGBClassifier()\nxgb_model.fit(X_train, y_train)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-09T17:09:00.998765Z","iopub.execute_input":"2024-09-09T17:09:00.999592Z","iopub.status.idle":"2024-09-09T17:09:02.656483Z","shell.execute_reply.started":"2024-09-09T17:09:00.999543Z","shell.execute_reply":"2024-09-09T17:09:02.655442Z"},"trusted":true},"execution_count":36,"outputs":[{"execution_count":36,"output_type":"execute_result","data":{"text/plain":"XGBClassifier(base_score=None, booster=None, callbacks=None,\n              colsample_bylevel=None, colsample_bynode=None,\n              colsample_bytree=None, device=None, early_stopping_rounds=None,\n              enable_categorical=False, eval_metric=None, feature_types=None,\n              gamma=None, grow_policy=None, importance_type=None,\n              interaction_constraints=None, learning_rate=None, max_bin=None,\n              max_cat_threshold=None, max_cat_to_onehot=None,\n              max_delta_step=None, max_depth=None, max_leaves=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              multi_strategy=None, n_estimators=None, n_jobs=None,\n              num_parallel_tree=None, random_state=None, ...)","text/html":"<style>#sk-container-id-4 {color: black;background-color: white;}#sk-container-id-4 pre{padding: 0;}#sk-container-id-4 div.sk-toggleable {background-color: white;}#sk-container-id-4 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-4 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-4 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-4 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-4 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-4 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-4 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-4 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-4 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-4 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-4 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-4 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-4 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-4 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-4 div.sk-item {position: relative;z-index: 1;}#sk-container-id-4 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-4 div.sk-item::before, #sk-container-id-4 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-4 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-4 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-4 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-4 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-4 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-4 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-4 div.sk-label-container {text-align: center;}#sk-container-id-4 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-4 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-4\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>XGBClassifier(base_score=None, booster=None, callbacks=None,\n              colsample_bylevel=None, colsample_bynode=None,\n              colsample_bytree=None, device=None, early_stopping_rounds=None,\n              enable_categorical=False, eval_metric=None, feature_types=None,\n              gamma=None, grow_policy=None, importance_type=None,\n              interaction_constraints=None, learning_rate=None, max_bin=None,\n              max_cat_threshold=None, max_cat_to_onehot=None,\n              max_delta_step=None, max_depth=None, max_leaves=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              multi_strategy=None, n_estimators=None, n_jobs=None,\n              num_parallel_tree=None, random_state=None, ...)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" checked><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">XGBClassifier</label><div class=\"sk-toggleable__content\"><pre>XGBClassifier(base_score=None, booster=None, callbacks=None,\n              colsample_bylevel=None, colsample_bynode=None,\n              colsample_bytree=None, device=None, early_stopping_rounds=None,\n              enable_categorical=False, eval_metric=None, feature_types=None,\n              gamma=None, grow_policy=None, importance_type=None,\n              interaction_constraints=None, learning_rate=None, max_bin=None,\n              max_cat_threshold=None, max_cat_to_onehot=None,\n              max_delta_step=None, max_depth=None, max_leaves=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              multi_strategy=None, n_estimators=None, n_jobs=None,\n              num_parallel_tree=None, random_state=None, ...)</pre></div></div></div></div></div>"},"metadata":{}}]},{"cell_type":"code","source":"y_pred_xgb = xgb_model.predict(X_test)\naccuracy_xgb = accuracy_score(y_test, y_pred_xgb)\nreport_xgb = classification_report(y_test, y_pred_xgb)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-09T17:09:02.657901Z","iopub.execute_input":"2024-09-09T17:09:02.658993Z","iopub.status.idle":"2024-09-09T17:09:02.684374Z","shell.execute_reply.started":"2024-09-09T17:09:02.658922Z","shell.execute_reply":"2024-09-09T17:09:02.683297Z"},"trusted":true},"execution_count":37,"outputs":[]},{"cell_type":"code","source":"train_score=round(xgb_model.score(X_train,y_train)*100)\nprint(train_score)","metadata":{"execution":{"iopub.status.busy":"2024-09-09T17:09:02.685910Z","iopub.execute_input":"2024-09-09T17:09:02.686625Z","iopub.status.idle":"2024-09-09T17:09:02.701526Z","shell.execute_reply.started":"2024-09-09T17:09:02.686585Z","shell.execute_reply":"2024-09-09T17:09:02.700461Z"},"trusted":true},"execution_count":38,"outputs":[{"name":"stdout","text":"92\n","output_type":"stream"}]},{"cell_type":"code","source":"test_score=round(xgb_model.score(X_test,y_test)*100)\nprint(test_score)","metadata":{"execution":{"iopub.status.busy":"2024-09-09T17:09:02.702971Z","iopub.execute_input":"2024-09-09T17:09:02.705794Z","iopub.status.idle":"2024-09-09T17:09:02.731569Z","shell.execute_reply.started":"2024-09-09T17:09:02.705736Z","shell.execute_reply":"2024-09-09T17:09:02.730568Z"},"trusted":true},"execution_count":39,"outputs":[{"name":"stdout","text":"80\n","output_type":"stream"}]},{"cell_type":"code","source":"rate = accuracy_xgb * 100\nprint(\"{:.0f}%\".format(rate))","metadata":{"execution":{"iopub.status.busy":"2024-09-09T17:09:02.733020Z","iopub.execute_input":"2024-09-09T17:09:02.733413Z","iopub.status.idle":"2024-09-09T17:09:02.739651Z","shell.execute_reply.started":"2024-09-09T17:09:02.733367Z","shell.execute_reply":"2024-09-09T17:09:02.738414Z"},"trusted":true},"execution_count":40,"outputs":[{"name":"stdout","text":"80%\n","output_type":"stream"}]},{"cell_type":"code","source":"print(\"XGBoost Accuracy:\", accuracy_xgb)\nprint(\"XGBoost Classification Report:\\n\", report_xgb)","metadata":{"execution":{"iopub.status.busy":"2024-09-09T17:09:02.741508Z","iopub.execute_input":"2024-09-09T17:09:02.741994Z","iopub.status.idle":"2024-09-09T17:09:02.750795Z","shell.execute_reply.started":"2024-09-09T17:09:02.741946Z","shell.execute_reply":"2024-09-09T17:09:02.749804Z"},"trusted":true},"execution_count":41,"outputs":[{"name":"stdout","text":"XGBoost Accuracy: 0.7988826815642458\nXGBoost Classification Report:\n               precision    recall  f1-score   support\n\n           0       0.82      0.85      0.83       105\n           1       0.77      0.73      0.75        74\n\n    accuracy                           0.80       179\n   macro avg       0.79      0.79      0.79       179\nweighted avg       0.80      0.80      0.80       179\n\n","output_type":"stream"}]},{"cell_type":"code","source":"print(confusion_matrix(y_test,y_pred_xgb))","metadata":{"execution":{"iopub.status.busy":"2024-09-09T17:09:02.752186Z","iopub.execute_input":"2024-09-09T17:09:02.753202Z","iopub.status.idle":"2024-09-09T17:09:02.764037Z","shell.execute_reply.started":"2024-09-09T17:09:02.753152Z","shell.execute_reply":"2024-09-09T17:09:02.762755Z"},"trusted":true},"execution_count":42,"outputs":[{"name":"stdout","text":"[[89 16]\n [20 54]]\n","output_type":"stream"}]}]}